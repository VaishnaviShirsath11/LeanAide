[["Multiplication by `n` is a polynomial function. ",{"type":"∀ (p : ℕ) [hp : Fact (Nat.Prime p)] (n : ℕ), WittVector.IsPoly p fun R _Rcr x => x * ↑n","name":"WittVector.mulN_isPoly","isProp":true,"docString":"Multiplication by `n` is a polynomial function. ","distance":0.318922027400265484242680713578010909259319305419921875}],[" The number of integers less than a positive integer `n` coprime to `n` is bounded above by the degree of the minimal polynomial of a primitive root of `n` in a commutative ring `K` of characteristic zero and with identity.",{"type":"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n → ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K], n.totient ≤ (minpoly ℤ μ).natDegree","name":"IsPrimitiveRoot.totient_le_degree_minpoly","isProp":true,"docString":" The number of integers less than a positive integer `n` coprime to `n` is bounded above by the degree of the minimal polynomial of a primitive root of `n` in a commutative ring `K` of characteristic zero and with identity.","distance":0.32450408392643226296314651335706003010272979736328125}],["This theorem states that for any natural number `n` and any field `K` with characteristic zero, if `μ` is a primitive `n`-th root of unity (i.e., `μ` is a root of 1 and its order is `n`), and `n` is positive, then the minimal polynomial of `μ` over the integers divides the `n`-th cyclotomic polynomial with integer coefficients. In other words, there are no integer polynomial factors of the `n`-th cyclotomic polynomial that do not also have `μ` as a root. Here, the minimal polynomial of a number is the monic polynomial of least degree that has the number as a root.",{"type":"∀ {n : ℕ} {K : Type u_2} [inst : Field K] {μ : K},\n  IsPrimitiveRoot μ n → 0 < n → ∀ [inst_1 : CharZero K], minpoly ℤ μ ∣ Polynomial.cyclotomic n ℤ","name":"IsPrimitiveRoot.minpoly_dvd_cyclotomic","isProp":true,"docString":"This theorem states that for any natural number `n` and any field `K` with characteristic zero, if `μ` is a primitive `n`-th root of unity (i.e., `μ` is a root of 1 and its order is `n`), and `n` is positive, then the minimal polynomial of `μ` over the integers divides the `n`-th cyclotomic polynomial with integer coefficients. In other words, there are no integer polynomial factors of the `n`-th cyclotomic polynomial that do not also have `μ` as a root. Here, the minimal polynomial of a number is the monic polynomial of least degree that has the number as a root.","distance":0.311719557922085666046285723496112041175365447998046875}],["If there is a primitive `n`-th root of unity in `K`, then `cyclotomic' n K` comes from a\nmonic polynomial with integer coefficients. ",{"type":"∀ {K : Type u_2} [inst : CommRing K] [inst_1 : IsDomain K] {ζ : K} {n : ℕ},\n  IsPrimitiveRoot ζ n →\n    ∃ P,\n      Polynomial.map (Int.castRingHom K) P = Polynomial.cyclotomic' n K ∧\n        Polynomial.degree P = Polynomial.degree (Polynomial.cyclotomic' n K) ∧ Polynomial.Monic P","name":"Polynomial.int_coeff_of_cyclotomic'","isProp":true,"docString":"If there is a primitive `n`-th root of unity in `K`, then `cyclotomic' n K` comes from a\nmonic polynomial with integer coefficients. ","distance":0.3238215808797815231656613832456059753894805908203125}],[" For any natural numbers $p$, $n$, and $k$, if $n < p^2$, then the prime $p$ has multiplicity at most $1$ in the prime factorization of the binomial coefficient $\\binom{n}{k}$.",{"type":"∀ {p n k : ℕ}, n < p ^ 2 → (n.choose k).factorization p ≤ 1","name":"Nat.factorization_choose_le_one","isProp":true,"docString":" For any natural numbers $p$, $n$, and $k$, if $n < p^2$, then the prime $p$ has multiplicity at most $1$ in the prime factorization of the binomial coefficient $\\binom{n}{k}$.","distance":0.328265217861319513747986320595373399555683135986328125}],["This theorem provides an upper bound on the multiplicity of a prime number 'p' in a binomial coefficient 'n choose k'. Specifically, it states that the multiplicity of 'p' in 'n choose k' is less than or equal to the logarithm base 'p' of 'n'. This gives a logarithmic upper bound on how many times a prime number divides into a particular binomial coefficient.",{"type":"∀ {p n k : ℕ}, (n.choose k).factorization p ≤ p.log n","name":"Nat.factorization_choose_le_log","isProp":true,"docString":"This theorem provides an upper bound on the multiplicity of a prime number 'p' in a binomial coefficient 'n choose k'. Specifically, it states that the multiplicity of 'p' in 'n choose k' is less than or equal to the logarithm base 'p' of 'n'. This gives a logarithmic upper bound on how many times a prime number divides into a particular binomial coefficient.","distance":0.33642562901562766963792228125385008752346038818359375}],["The degree of a minimal polynomial, as a natural number, is positive. ",{"type":"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\n  [inst_3 : Nontrivial B], IsIntegral A x → 0 < Polynomial.natDegree (minpoly A x)","name":"minpoly.natDegree_pos","isProp":true,"docString":"The degree of a minimal polynomial, as a natural number, is positive. ","distance":0.3330319270181332225178039152524434030055999755859375}],["For any multiplicative function `f` and any `n > 0`,\nwe can evaluate `f n` by evaluating `f` at `p ^ k` over the factorization of `n` ",{"type":"∀ {R : Type u_1} [inst : CommMonoidWithZero R] (f : Nat.ArithmeticFunction R),\n  Nat.ArithmeticFunction.IsMultiplicative f →\n    ∀ {n : ℕ}, n ≠ 0 → f n = Finsupp.prod (Nat.factorization n) fun p k => f (p ^ k)","name":"Nat.ArithmeticFunction.IsMultiplicative.multiplicative_factorization","isProp":true,"docString":"For any multiplicative function `f` and any `n > 0`,\nwe can evaluate `f n` by evaluating `f` at `p ^ k` over the factorization of `n` ","distance":0.339781748689508222849298135770368389785289764404296875}],["Count the number of naturals `k < n` satisfying `p k`. ",{"type":"(p : ℕ → Prop) → [inst : DecidablePred p] → ℕ → ℕ","name":"Nat.count","isProp":false,"docString":"Count the number of naturals `k < n` satisfying `p k`. ","distance":0.340185854914349661282102488257805816829204559326171875}],["The minimal polynomial of a primitive `n`-th root of unity `μ` divides `cyclotomic n ℤ`. ",{"type":"∀ {n : ℕ} {K : Type u_2} [inst : Field K] {μ : K},\n  IsPrimitiveRoot μ n → 0 < n → ∀ [inst_1 : CharZero K], minpoly ℤ μ ∣ Polynomial.cyclotomic n ℤ","name":"IsPrimitiveRoot.minpoly_dvd_cyclotomic","isProp":true,"docString":"The minimal polynomial of a primitive `n`-th root of unity `μ` divides `cyclotomic n ℤ`. ","distance":0.340633810549662907618539975374005734920501708984375}],["For any multiplicative function `f` with `f 1 = 1` and any `n ≠ 0`,\nwe can evaluate `f n` by evaluating `f` at `p ^ k` over the factorization of `n` ",{"type":"∀ {β : Type u_1} [inst : CommMonoid β] (f : ℕ → β),\n  (∀ (x y : ℕ), Nat.Coprime x y → f (x * y) = f x * f y) →\n    f 1 = 1 → ∀ {n : ℕ}, n ≠ 0 → f n = Finsupp.prod (Nat.factorization n) fun p k => f (p ^ k)","name":"Nat.multiplicative_factorization","isProp":true,"docString":"For any multiplicative function `f` with `f 1 = 1` and any `n ≠ 0`,\nwe can evaluate `f n` by evaluating `f` at `p ^ k` over the factorization of `n` ","distance":0.342295542662815754919591881844098679721355438232421875}],["The degree of a minimal polynomial is positive. ",{"type":"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B}\n  [inst_3 : Nontrivial B], IsIntegral A x → 0 < Polynomial.degree (minpoly A x)","name":"minpoly.degree_pos","isProp":true,"docString":"The degree of a minimal polynomial is positive. ","distance":0.34408663302312059162346713492297567427158355712890625}],["The minimal polynomial of a root of unity `μ` divides `X ^ n - 1`. ",{"type":"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n → ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K], minpoly ℤ μ ∣ Polynomial.X ^ n - 1","name":"IsPrimitiveRoot.minpoly_dvd_x_pow_sub_one","isProp":true,"docString":"The minimal polynomial of a root of unity `μ` divides `X ^ n - 1`. ","distance":0.346348869486573562870290743376244790852069854736328125}],["The degree of the minimal polynomial of `μ` is at least `totient n`. ",{"type":"∀ {n : ℕ} {K : Type u_1} [inst : CommRing K] {μ : K},\n  IsPrimitiveRoot μ n →\n    ∀ [inst_1 : IsDomain K] [inst_2 : CharZero K], Nat.totient n ≤ Polynomial.natDegree (minpoly ℤ μ)","name":"IsPrimitiveRoot.totient_le_degree_minpoly","isProp":true,"docString":"The degree of the minimal polynomial of `μ` is at least `totient n`. ","distance":0.34650388783568220052444530665525235235691070556640625}],["A minimal polynomial is monic. ",{"type":"∀ {A : Type u_1} {B : Type u_2} [inst : CommRing A] [inst_1 : Ring B] [inst_2 : Algebra A B] {x : B},\n  IsIntegral A x → Polynomial.Monic (minpoly A x)","name":"minpoly.monic","isProp":true,"docString":"A minimal polynomial is monic. ","distance":0.3475394311257911095225381359341554343700408935546875}],["`X n` is the degree `1` monomial $X_n$. ",{"type":"{R : Type u} → {σ : Type u_1} → [inst : CommSemiring R] → σ → MvPolynomial σ R","name":"MvPolynomial.X","isProp":false,"docString":"`X n` is the degree `1` monomial $X_n$. ","distance":0.34925663104658111191014313590130768716335296630859375}],["The root of this polynomial determines the `n+1`st coefficient of our solution. ",{"type":"(p : ℕ) →\n  [hp : Fact (Nat.Prime p)] →\n    {k : Type u_1} →\n      [inst : CommRing k] →\n        [inst_1 : CharP k p] → (n : ℕ) → WittVector p k → WittVector p k → (Fin (n + 1) → k) → Polynomial k","name":"WittVector.RecursionMain.succNthDefiningPoly","isProp":false,"docString":"The root of this polynomial determines the `n+1`st coefficient of our solution. ","distance":0.349806707401949357194581580188241787254810333251953125}],["For any `p`, the power of `p` in `n^k` is `k` times the power in `n` ",{"type":"∀ (n k : ℕ), Nat.factorization (n ^ k) = k • Nat.factorization n","name":"Nat.factorization_pow","isProp":true,"docString":"For any `p`, the power of `p` in `n^k` is `k` times the power in `n` ","distance":0.3504704847884296814441995593369938433170318603515625}],["The span of every finite set of polynomials is contained in a `degreeLE n` for some `n`. ",{"type":"∀ {R : Type u} [inst : Semiring R] {s : Set (Polynomial R)},\n  Set.Finite s → ∃ n, Submodule.span R s ≤ Polynomial.degreeLE R ↑n","name":"Polynomial.span_le_degreeLE_of_finite","isProp":true,"docString":"The span of every finite set of polynomials is contained in a `degreeLE n` for some `n`. ","distance":0.353019201352218370271174308072659187018871307373046875}],["This is the polynomial whose degree we want to get a handle on. ",{"type":"(p : ℕ) → [hp : Fact (Nat.Prime p)] → ℕ → MvPolynomial (Fin 2 × ℕ) ℤ","name":"WittVector.polyOfInterest","isProp":false,"docString":"This is the polynomial whose degree we want to get a handle on. ","distance":0.353343346625848042652506819649715907871723175048828125}],["For any multiplicative function `f` with `f 1 = 1` and `f 0 = 1`,\nwe can evaluate `f n` by evaluating `f` at `p ^ k` over the factorization of `n` ",{"type":"∀ {n : ℕ} {β : Type u_1} [inst : CommMonoid β] (f : ℕ → β),\n  (∀ (x y : ℕ), Nat.Coprime x y → f (x * y) = f x * f y) →\n    f 0 = 1 → f 1 = 1 → f n = Finsupp.prod (Nat.factorization n) fun p k => f (p ^ k)","name":"Nat.multiplicative_factorization'","isProp":true,"docString":"For any multiplicative function `f` with `f 1 = 1` and `f 0 = 1`,\nwe can evaluate `f n` by evaluating `f` at `p ^ k` over the factorization of `n` ","distance":0.3548392617004749727271928350091911852359771728515625}],["`σ k n` is the sum of the `k`th powers of the divisors of `n` ",{"type":"Lean.ParserDescr","name":"Nat.ArithmeticFunction.termσ","isProp":false,"docString":"`σ k n` is the sum of the `k`th powers of the divisors of `n` ","distance":0.35514808965650523919777015180443413555622100830078125}],["A `k`-smooth number can be written as a square times a product of distinct primes `< k`. ",{"type":"∀ {n k : ℕ}, n ∈ Nat.smoothNumbers k → ∃ s ∈ Finset.powerset (Nat.primesBelow k), ∃ m, n = m ^ 2 * Finset.prod s id","name":"Nat.eq_prod_primes_mul_sq_of_mem_smoothNumbers","isProp":true,"docString":"A `k`-smooth number can be written as a square times a product of distinct primes `< k`. ","distance":0.359007743768463283284830822594813071191310882568359375}],["For `d ∣ n`, the totient of `n/d` equals the number of values `k < n` such that `gcd n k = d` ",{"type":"∀ {n d : ℕ}, d ∣ n → Nat.totient (n / d) = (Finset.filter (fun k => Nat.gcd n k = d) (Finset.range n)).card","name":"Nat.totient_div_of_dvd","isProp":true,"docString":"For `d ∣ n`, the totient of `n/d` equals the number of values `k < n` such that `gcd n k = d` ","distance":0.360476714197143000006917645805515348911285400390625}]]