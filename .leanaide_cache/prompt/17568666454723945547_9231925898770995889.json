[["The `n`th elementary symmetric function evaluated at the elements of `s` ",{"type":"{R : Type u_1} → [inst : CommSemiring R] → Multiset R → ℕ → R","name":"Multiset.esymm","isProp":false,"docString":"The `n`th elementary symmetric function evaluated at the elements of `s` ","distance":0.20907087498629717270404171358677558600902557373046875}],[" For any commutative semiring R and multiset s of type R, the k-th coefficient of the polynomial product of X + λ over λ in s equals the (cardinality of s - k)-th elementary symmetric function of s, provided that k is less than or equal to the cardinality of s.",{"type":"∀ {R : Type u_1} [inst : CommSemiring R] (s : Multiset R) {k : ℕ},\n  k ≤ Multiset.card s →\n    (Multiset.map (fun r => Polynomial.X + Polynomial.C r) s).prod.coeff k = s.esymm (Multiset.card s - k)","name":"Multiset.prod_X_add_C_coeff","isProp":true,"docString":" For any commutative semiring R and multiset s of type R, the k-th coefficient of the polynomial product of X + λ over λ in s equals the (cardinality of s - k)-th elementary symmetric function of s, provided that k is less than or equal to the cardinality of s.","distance":0.274836035176194759532819489322719164192676544189453125}],["This theorem provides a version of Newton's identities, which can be particularly useful when we know the values of the elementary symmetric polynomials and wish to calculate the values of the power sums. Specifically, for any given set `σ` of a `Fintype` and any given `CommRing` `R`, and for any natural number `k` greater than 0, the `k`th power sum polynomial is defined to be equal to (-1) to the power of `(k+1)` times `k` times the `k`th elementary symmetric polynomial minus the sum of the products of (-1) to the power of `a.1` times the `a.1`th elementary symmetric polynomial times the `a.2`th power sum polynomial over all pairs `(a.1, a.2)` in the antidiagonal of `k` such that `a.1` is in the open interval from 0 to `k`.",{"type":"∀ (σ : Type u_1) [inst : Fintype σ] (R : Type u_2) [inst_1 : CommRing R] (k : ℕ),\n  0 < k →\n    MvPolynomial.psum σ R k =\n      (-1) ^ (k + 1) * ↑k * MvPolynomial.esymm σ R k -\n        (Finset.filter (fun a => a.1 ∈ Set.Ioo 0 k) (Finset.antidiagonal k)).sum fun a =>\n          (-1) ^ a.1 * MvPolynomial.esymm σ R a.1 * MvPolynomial.psum σ R a.2","name":"MvPolynomial.psum_eq_mul_esymm_sub_sum","isProp":true,"docString":"This theorem provides a version of Newton's identities, which can be particularly useful when we know the values of the elementary symmetric polynomials and wish to calculate the values of the power sums. Specifically, for any given set `σ` of a `Fintype` and any given `CommRing` `R`, and for any natural number `k` greater than 0, the `k`th power sum polynomial is defined to be equal to (-1) to the power of `(k+1)` times `k` times the `k`th elementary symmetric polynomial minus the sum of the products of (-1) to the power of `a.1` times the `a.1`th elementary symmetric polynomial times the `a.2`th power sum polynomial over all pairs `(a.1, a.2)` in the antidiagonal of `k` such that `a.1` is in the open interval from 0 to `k`.","distance":0.2874669744624542833122404772439040243625640869140625}],["The product of `f a + g a` over all of `s` is the sum over the powerset of `s` of the product of\n`f` over a subset `t` times the product of `g` over the complement of `t`  ",{"type":"∀ {ι : Type u_1} {α : Type u_2} [inst : CommSemiring α] [inst_1 : DecidableEq ι] (f g : ι → α) (s : Finset ι),\n  (Finset.prod s fun i => f i + g i) =\n    Finset.sum (Finset.powerset s) fun t => (Finset.prod t fun i => f i) * Finset.prod (s \\ t) fun i => g i","name":"Finset.prod_add","isProp":true,"docString":"The product of `f a + g a` over all of `s` is the sum over the powerset of `s` of the product of\n`f` over a subset `t` times the product of `g` over the complement of `t`  ","distance":0.310640196802474399806470728435670025646686553955078125}],[" For any commutative semiring `R`, function `f` from type `σ` to `R`, finite set `s` of elements of type `σ`, and natural number `n`, the `n`th elementary symmetric function of the multiset obtained by mapping `f` over the elements of `s` equals the sum of products of `f` applied to subsets of `s` of size `n`.",{"type":"∀ {R : Type u_1} [inst : CommSemiring R] {σ : Type u_2} (f : σ → R) (s : Finset σ) (n : ℕ),\n  (Multiset.map f s.val).esymm n = (Finset.powersetCard n s).sum fun t => t.prod f","name":"Finset.esymm_map_val","isProp":true,"docString":" For any commutative semiring `R`, function `f` from type `σ` to `R`, finite set `s` of elements of type `σ`, and natural number `n`, the `n`th elementary symmetric function of the multiset obtained by mapping `f` over the elements of `s` equals the sum of products of `f` applied to subsets of `s` of size `n`.","distance":0.286869115352195447332661615291726775467395782470703125}],["The theorem `Finset.esymm_map_val` states that for any type `R` equipped with a commutative semiring structure, a function `f` from type `σ` to `R`, a finite set `s` of elements of type `σ`, and a natural number `n`, the `n`th elementary symmetric function evaluated at the elements of the multiset obtained by mapping `f` over the elements of `s` is equal to the sum, over all subsets of `s` of cardinality `n`, of the product of the function `f` applied to the elements of each subset. In other words, it links elementary symmetric functions with a sum of products over subsets of a fixed cardinality.",{"type":"∀ {R : Type u_1} [inst : CommSemiring R] {σ : Type u_2} (f : σ → R) (s : Finset σ) (n : ℕ),\n  (Multiset.map f s.val).esymm n = (Finset.powersetCard n s).sum fun t => t.prod f","name":"Finset.esymm_map_val","isProp":true,"docString":"The theorem `Finset.esymm_map_val` states that for any type `R` equipped with a commutative semiring structure, a function `f` from type `σ` to `R`, a finite set `s` of elements of type `σ`, and a natural number `n`, the `n`th elementary symmetric function evaluated at the elements of the multiset obtained by mapping `f` over the elements of `s` is equal to the sum, over all subsets of `s` of cardinality `n`, of the product of the function `f` applied to the elements of each subset. In other words, it links elementary symmetric functions with a sum of products over subsets of a fixed cardinality.","distance":0.290622258150709911195264112393488176167011260986328125}],["**Newton's identities** give a recurrence relation for the kth elementary symmetric polynomial\nin terms of lower degree elementary symmetric polynomials and power sums. ",{"type":"∀ (σ : Type u_1) [inst : Fintype σ] [inst_1 : DecidableEq σ] (R : Type u_2) [inst_2 : CommRing R] (k : ℕ),\n  ↑k * MvPolynomial.esymm σ R k =\n    (-1) ^ (k + 1) *\n      Finset.sum (Finset.filter (fun a => a.1 < k) (Finset.antidiagonal k)) fun a =>\n        (-1) ^ a.1 * MvPolynomial.esymm σ R a.1 * MvPolynomial.psum σ R a.2","name":"MvPolynomial.mul_esymm_eq_sum","isProp":true,"docString":"**Newton's identities** give a recurrence relation for the kth elementary symmetric polynomial\nin terms of lower degree elementary symmetric polynomials and power sums. ","distance":0.31306174029806843606138500035740435123443603515625}],["The second element of a product $\\prod_{i=0}^n (r_i + m_i)$ is a sum of terms of the form\n$r_0\\cdots r_{i-1}m_ir_{i+1}\\cdots r_n$. ",{"type":"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\n  [inst_3 : Module Rᵐᵒᵖ M] [inst_4 : SMulCommClass R Rᵐᵒᵖ M] (l : List (TrivSqZeroExt R M)),\n  TrivSqZeroExt.snd (List.prod l) =\n    List.sum\n      (List.map\n        (fun x =>\n          List.prod (List.take x.1 (List.map TrivSqZeroExt.fst l)) •\n            MulOpposite.op (List.prod (List.drop (Nat.succ x.1) (List.map TrivSqZeroExt.fst l))) •\n              TrivSqZeroExt.snd x.2)\n        (List.enum l))","name":"TrivSqZeroExt.snd_list_prod","isProp":true,"docString":"The second element of a product $\\prod_{i=0}^n (r_i + m_i)$ is a sum of terms of the form\n$r_0\\cdots r_{i-1}m_ir_{i+1}\\cdots r_n$. ","distance":0.3144725896503981488194767734967172145843505859375}],["If `a` does not belong to the finset `s`, then the `n`th symmetric power of `{a} ∪ s` is\nin 1-1 correspondence with the disjoint union of the `n - i`th symmetric powers of `s`,\nfor `0 ≤ i ≤ n`. ",{"type":"{α : Type u_1} →\n  [inst : DecidableEq α] →\n    {s : Finset α} →\n      {a : α} →\n        {n : ℕ} →\n          a ∉ s → { x // x ∈ Finset.sym (insert a s) n } ≃ (i : Fin (n + 1)) × { x // x ∈ Finset.sym s (n - ↑i) }","name":"Finset.symInsertEquiv","isProp":false,"docString":"If `a` does not belong to the finset `s`, then the `n`th symmetric power of `{a} ∪ s` is\nin 1-1 correspondence with the disjoint union of the `n - i`th symmetric powers of `s`,\nfor `0 ≤ i ≤ n`. ","distance":0.318611943822156351568963827958214096724987030029296875}],["If a function `f` equals `1` on a set `s`, then the product of `f i` over `i ∈ s` equals `1`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {f : α → M} {s : Set α},\n  Set.EqOn f 1 s → (finprod fun i => finprod fun h => f i) = 1","name":"finprod_mem_of_eqOn_one","isProp":true,"docString":"If a function `f` equals `1` on a set `s`, then the product of `f i` over `i ∈ s` equals `1`. ","distance":0.325126609912203046182099797078990377485752105712890625}],["`σ k n` is the sum of the `k`th powers of the divisors of `n` ",{"type":"Lean.ParserDescr","name":"Nat.ArithmeticFunction.termσ","isProp":false,"docString":"`σ k n` is the sum of the `k`th powers of the divisors of `n` ","distance":0.32832888643174984455441745012649334967136383056640625}],["The map $n \\mapsto \\prod_{p \\mid n} f(p)$ as an arithmetic function ",{"type":"{R : Type u_1} → [inst : CommMonoidWithZero R] → (ℕ → R) → Nat.ArithmeticFunction R","name":"Nat.ArithmeticFunction.prodPrimeFactors","isProp":false,"docString":"The map $n \\mapsto \\prod_{p \\mid n} f(p)$ as an arithmetic function ","distance":0.332167882579409046162055574313853867352008819580078125}],["Given a finite set `s`, the product of `f i * g i` over `i ∈ s` equals the product of `f i`\nover `i ∈ s` times the product of `g i` over `i ∈ s`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {f g : α → M} {s : Set α},\n  Set.Finite s →\n    (finprod fun i => finprod fun h => f i * g i) =\n      (finprod fun i => finprod fun h => f i) * finprod fun i => finprod fun h => g i","name":"finprod_mem_mul_distrib","isProp":true,"docString":"Given a finite set `s`, the product of `f i * g i` over `i ∈ s` equals the product of `f i`\nover `i ∈ s` times the product of `g i` over `i ∈ s`. ","distance":0.33272497491705987915366904417169280350208282470703125}],["The symmetric product of vectors is a scalar ",{"type":"∀ {R : Type u_1} [inst : CommRing R] {M : Type u_2} [inst_1 : AddCommGroup M] [inst_2 : Module R M]\n  {Q : QuadraticForm R M} (a b : M),\n  (CliffordAlgebra.ι Q) a * (CliffordAlgebra.ι Q) b + (CliffordAlgebra.ι Q) b * (CliffordAlgebra.ι Q) a =\n    (algebraMap R (CliffordAlgebra Q)) (QuadraticForm.polar (⇑Q) a b)","name":"CliffordAlgebra.ι_mul_ι_add_swap","isProp":true,"docString":"The symmetric product of vectors is a scalar ","distance":0.33500858296882174425235234593856148421764373779296875}],["The `n`th power of `s : Sum` is the `n`-fold product of `s`, with `s.pow 0 = Sum.one`. ",{"type":"Linarith.Sum → ℕ → Linarith.Sum","name":"Linarith.Sum.pow","isProp":false,"docString":"The `n`th power of `s : Sum` is the `n`-fold product of `s`, with `s.pow 0 = Sum.one`. ","distance":0.3359540660432689396230898637440986931324005126953125}],["Given a finite set `s` and an element `a ∉ s`, the product of `f i` over `i ∈ insert a s` equals\n`f a` times the product of `f i` over `i ∈ s`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {a : α} {s : Set α} (f : α → M),\n  a ∉ s → Set.Finite s → (finprod fun i => finprod fun h => f i) = f a * finprod fun i => finprod fun h => f i","name":"finprod_mem_insert","isProp":true,"docString":"Given a finite set `s` and an element `a ∉ s`, the product of `f i` over `i ∈ insert a s` equals\n`f a` times the product of `f i` over `i ∈ s`. ","distance":0.338306447502540574845397713943384587764739990234375}],["We can define `esymm σ R n` as a sum over explicit monomials ",{"type":"∀ (σ : Type u_1) (R : Type u_2) [inst : CommSemiring R] [inst_1 : Fintype σ] (n : ℕ),\n  MvPolynomial.esymm σ R n =\n    Finset.sum (Finset.powersetCard n Finset.univ) fun t =>\n      (MvPolynomial.monomial (Finset.sum t fun i => fun₀ | i => 1)) 1","name":"MvPolynomial.esymm_eq_sum_monomial","isProp":true,"docString":"We can define `esymm σ R n` as a sum over explicit monomials ","distance":0.338710119515114482791062755495659075677394866943359375}],["`a ^ (n + 1) = a * a ^ n` ",{"type":"∀ {α : Type u_2} [self : LinearOrderedSemifield α] (n : ℕ) (a : α),\n  LinearOrderedSemifield.zpow (Int.ofNat (Nat.succ n)) a = a * LinearOrderedSemifield.zpow (Int.ofNat n) a","name":"LinearOrderedSemifield.zpow_succ'","isProp":true,"docString":"`a ^ (n + 1) = a * a ^ n` ","distance":0.340070863655822119842042638993007130920886993408203125}],["If `t` is a finite set of pairwise disjoint finite sets, then the product of `f a`\nover `a ∈ ⋃₀ t` is the product over `s ∈ t` of the products of `f a` over `a ∈ s`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {f : α → M} {t : Set (Set α)},\n  Set.PairwiseDisjoint t id →\n    Set.Finite t →\n      (∀ x ∈ t, Set.Finite x) →\n        (finprod fun a => finprod fun h => f a) =\n          finprod fun s => finprod fun h => finprod fun a => finprod fun h => f a","name":"finprod_mem_sUnion","isProp":true,"docString":"If `t` is a finite set of pairwise disjoint finite sets, then the product of `f a`\nover `a ∈ ⋃₀ t` is the product over `s ∈ t` of the products of `f a` over `a ∈ s`. ","distance":0.34209968964234860333561982770333997905254364013671875}],["A set `s` is nonempty if the product of some function over `s` is not equal to `1`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {f : α → M} {s : Set α},\n  (finprod fun i => finprod fun h => f i) ≠ 1 → Set.Nonempty s","name":"nonempty_of_finprod_mem_ne_one","isProp":true,"docString":"A set `s` is nonempty if the product of some function over `s` is not equal to `1`. ","distance":0.342774162812760463392436349749914370477199554443359375}],["The submodule of polynomials that are sum of monomials in the set `s`. ",{"type":"{σ : Type u} → (R : Type v) → [inst : CommSemiring R] → Set (σ →₀ ℕ) → Submodule R (MvPolynomial σ R)","name":"MvPolynomial.restrictSupport","isProp":false,"docString":"The submodule of polynomials that are sum of monomials in the set `s`. ","distance":0.342990949673551759335765609648660756647586822509765625}],["A version of Newton's identities which may be more useful in the case that we know the values of\nthe elementary symmetric polynomials and would like to calculate the values of the power sums. ",{"type":"∀ (σ : Type u_1) [inst : Fintype σ] [inst_1 : DecidableEq σ] (R : Type u_2) [inst_2 : CommRing R] (k : ℕ),\n  0 < k →\n    MvPolynomial.psum σ R k =\n      (-1) ^ (k + 1) * ↑k * MvPolynomial.esymm σ R k -\n        Finset.sum (Finset.filter (fun a => a.1 ∈ Set.Ioo 0 k) (Finset.antidiagonal k)) fun a =>\n          (-1) ^ a.1 * MvPolynomial.esymm σ R a.1 * MvPolynomial.psum σ R a.2","name":"MvPolynomial.psum_eq_mul_esymm_sub_sum","isProp":true,"docString":"A version of Newton's identities which may be more useful in the case that we know the values of\nthe elementary symmetric polynomials and would like to calculate the values of the power sums. ","distance":0.34380880042686856601363842855789698660373687744140625}],["Vieta's formula for the coefficients of the product of linear terms `X + λ` where `λ` runs\nthrough a multiset `s` : the `k`th coefficient is the symmetric function `esymm (card s - k) s`. ",{"type":"∀ {R : Type u_1} [inst : CommSemiring R] (s : Multiset R) {k : ℕ},\n  k ≤ Multiset.card s →\n    Polynomial.coeff (Multiset.prod (Multiset.map (fun r => Polynomial.X + Polynomial.C r) s)) k =\n      Multiset.esymm s (Multiset.card s - k)","name":"Multiset.prod_X_add_C_coeff","isProp":true,"docString":"Vieta's formula for the coefficients of the product of linear terms `X + λ` where `λ` runs\nthrough a multiset `s` : the `k`th coefficient is the symmetric function `esymm (card s - k) s`. ","distance":0.344036743319388438333561452964204363524913787841796875}],["The `n`th elementary symmetric `MvPolynomial σ R` is obtained by evaluating the\n`n`th elementary symmetric at the `Multiset` of the monomials ",{"type":"∀ (σ : Type u_1) (R : Type u_2) [inst : CommSemiring R] [inst_1 : Fintype σ],\n  MvPolynomial.esymm σ R = Multiset.esymm (Multiset.map MvPolynomial.X Finset.univ.val)","name":"MvPolynomial.esymm_eq_multiset_esymm","isProp":true,"docString":"The `n`th elementary symmetric `MvPolynomial σ R` is obtained by evaluating the\n`n`th elementary symmetric at the `Multiset` of the monomials ","distance":0.345378567557203253191033809343934990465641021728515625}]]