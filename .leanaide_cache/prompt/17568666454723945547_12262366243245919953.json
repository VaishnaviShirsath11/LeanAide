[["The element of G ",{"type":"{N : Type u_1} → {G : Type u_2} → [inst : Group N] → [inst_1 : Group G] → {φ : G →* MulAut N} → N ⋊[φ] G → G","name":"SemidirectProduct.right","isProp":false,"docString":"The element of G ","distance":0.381097224678496548921913245067116804420948028564453125}],[" For any measure space with measurable space and measure, and two functions from to the extended nonnegative real numbers with being almost everywhere less than or equal to almost everywhere measurable g, the integral of f with respect to μ and ε times the measure of {x | f(x) + ε < g(x)} is less than or equal to the integral of g with respect to μ.",{"type":"∀ {α : Type u_1} {m : MeasurableSpace α} {μ : MeasureTheory.Measure α} {f g : α → ENNReal},\n  μ.ae.EventuallyLE f g →\n    AEMeasurable g μ → ∀ (ε : ENNReal), ∫⁻ (a : α), f a ∂μ + ε * ↑↑μ {x | f x + ε ≤ g x} ≤ ∫⁻ (a : α), g a ∂μ","name":"MeasureTheory.lintegral_add_mul_meas_add_le_le_lintegral","isProp":true,"docString":" For any measure space with measurable space and measure, and two functions from to the extended nonnegative real numbers with being almost everywhere less than or equal to almost everywhere measurable g, the integral of f with respect to μ and ε times the measure of {x | f(x) + ε < g(x)} is less than or equal to the integral of g with respect to μ.","distance":0.4706061030308112957953881050343625247478485107421875}],["This theorem, `Nat.le_findGreatest`, asserts that for any natural number `m` and a decidable predicate `P` (a predicate for which we can definitively say whether it is true or false), if `m` is less than or equal to `n` and `P(m)` holds true, then `m` is less than or equal to the greatest natural number `i` less than or equal to `n` for which `P(i)` holds. In other words, if `m` satisfies the predicate `P` and is within the bounds of `n`, it cannot be larger than the greatest such number that fulfills these conditions.",{"type":"∀ {m : ℕ} {P : ℕ → Prop} [inst : DecidablePred P] {n : ℕ}, m ≤ n → P m → m ≤ Nat.findGreatest P n","name":"Nat.le_findGreatest","isProp":true,"docString":"This theorem, `Nat.le_findGreatest`, asserts that for any natural number `m` and a decidable predicate `P` (a predicate for which we can definitively say whether it is true or false), if `m` is less than or equal to `n` and `P(m)` holds true, then `m` is less than or equal to the greatest natural number `i` less than or equal to `n` for which `P(i)` holds. In other words, if `m` satisfies the predicate `P` and is within the bounds of `n`, it cannot be larger than the greatest such number that fulfills these conditions.","distance":0.45866063086605135534767896388075314462184906005859375}],["The gcongr widget. ",{"type":"ProofWidgets.Component SelectInsertParams","name":"GCongrSelectionPanel","isProp":false,"docString":"The gcongr widget. ","distance":0.3861096057360848821105037131928838789463043212890625}],[" In a partially ordered set with a greatest element, the greatest element is the unique element that is less than or equal to itself.",{"type":"∀ {α : Type u} [inst : PartialOrder α] [inst_1 : OrderTop α] {a : α}, ⊤ ≤ a ↔ a = ⊤","name":"top_le_iff","isProp":true,"docString":" In a partially ordered set with a greatest element, the greatest element is the unique element that is less than or equal to itself.","distance":0.472388955614768069057873844940331764519214630126953125}],["This theorem states that for all natural numbers 'm' and 'n', if 'm' is greater than 0, then 'n' is less than or equal to 'n' multiplied by 'm'. In other words, it's saying that any non-zero multiplication of a number will always be greater than or equal to the number itself.",{"type":"∀ {m : ℕ} (n : ℕ), 0 < m → n ≤ n * m","name":"Nat.le_mul_of_pos_right","isProp":true,"docString":"This theorem states that for all natural numbers 'm' and 'n', if 'm' is greater than 0, then 'n' is less than or equal to 'n' multiplied by 'm'. In other words, it's saying that any non-zero multiplication of a number will always be greater than or equal to the number itself.","distance":0.46516540665460415215903822172549553215503692626953125}],["The distinguished infinite place. ",{"type":"{K : Type u_1} → [inst : Field K] → [inst_1 : NumberField K] → NumberField.InfinitePlace K","name":"NumberField.Units.dirichletUnitTheorem.w₀","isProp":false,"docString":"The distinguished infinite place. ","distance":0.38648705376662617627658846686244942247867584228515625}],["the distinguished element ",{"type":"(self : Pointed) → self.X","name":"Pointed.point","isProp":false,"docString":"the distinguished element ","distance":0.38888227440343625662677595755667425692081451416015625}],["an arrow ",{"type":"{V : Type u} → [inst : Quiver V] → (self : Quiver.Total V) → self.left ⟶ self.right","name":"Quiver.Total.hom","isProp":false,"docString":"an arrow ","distance":0.391479717318970299455571648650220595300197601318359375}],["The empty set is meagre. ",{"type":"∀ {X : Type u_5} [inst : TopologicalSpace X], IsMeagre ∅","name":"meagre_empty","isProp":true,"docString":"The empty set is meagre. ","distance":0.400024190993160611018453209908329881727695465087890625}],["The set of good products. ",{"type":"{I : Type u} → [inst : LinearOrder I] → Set (I → Bool) → Set (Profinite.NobelingProof.Products I)","name":"Profinite.NobelingProof.GoodProducts","isProp":false,"docString":"The set of good products. ","distance":0.400076863793804526903130636128480546176433563232421875}],["The empty finset ",{"type":"{α : Type u_1} → Finset α","name":"Finset.empty","isProp":false,"docString":"The empty finset ","distance":0.4008928666189481848647346851066686213016510009765625}],["A greatest element of a set is the supremum of this set. ",{"type":"∀ {α : Type u_1} [inst : ConditionallyCompleteLattice α] {s : Set α} {a : α}, IsGreatest s a → sSup s = a","name":"IsGreatest.csSup_eq","isProp":true,"docString":"A greatest element of a set is the supremum of this set. ","distance":0.401051944540271210204451790559687651693820953369140625}],["There is a splitting ",{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] {X Y : C} {f : X ⟶ Y} [self : CategoryTheory.IsSplitEpi f],\n  Nonempty (CategoryTheory.SplitEpi f)","name":"CategoryTheory.IsSplitEpi.exists_splitEpi","isProp":true,"docString":"There is a splitting ","distance":0.40437525578338984200144068381632678210735321044921875}],["The positive part function. ",{"type":"Lean.TrailingParserDescr","name":"«term_⁺»","isProp":false,"docString":"The positive part function. ","distance":0.405041882688972176840280781107139773666858673095703125}],["The congrm widget. ",{"type":"ProofWidgets.Component SelectInsertParams","name":"CongrmSelectionPanel","isProp":false,"docString":"The congrm widget. ","distance":0.40531940006123245989755332630011253058910369873046875}],["tensorator ",{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    [inst_1 : CategoryTheory.MonoidalCategory C] →\n      {D : Type u₂} →\n        [inst_2 : CategoryTheory.Category.{v₂, u₂} D] →\n          [inst_3 : CategoryTheory.MonoidalCategory D] →\n            {F : C → D} →\n              [inst_4 : CategoryTheory.Functorial F] →\n                [self : CategoryTheory.LaxMonoidal F] →\n                  (X Y : C) →\n                    CategoryTheory.MonoidalCategory.tensorObj (F X) (F Y) ⟶\n                      F (CategoryTheory.MonoidalCategory.tensorObj X Y)","name":"CategoryTheory.LaxMonoidal.μ","isProp":false,"docString":"tensorator ","distance":0.40543546537552599406950548655004240572452545166015625}],["The counit for the comonad `G`. ",{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v₁, u₁} C] →\n    (G : CategoryTheory.Comonad C) → G.toFunctor ⟶ CategoryTheory.Functor.id C","name":"CategoryTheory.Comonad.ε","isProp":false,"docString":"The counit for the comonad `G`. ","distance":0.406044637296670896109418436026317067444324493408203125}],["The head of the trees are equal ",{"type":"∀ {F : PFunctor.{u}} {R : PFunctor.M F → PFunctor.M F → Prop},\n  PFunctor.M.IsBisimulation R →\n    ∀ {a a' : F.A} {f : PFunctor.B F a → PFunctor.M F} {f' : PFunctor.B F a' → PFunctor.M F},\n      R (PFunctor.M.mk { fst := a, snd := f }) (PFunctor.M.mk { fst := a', snd := f' }) → a = a'","name":"PFunctor.M.IsBisimulation.head","isProp":true,"docString":"The head of the trees are equal ","distance":0.406159844986941076516728799106203950941562652587890625}],["Evaluation of good products. ",{"type":"{I : Type u} →\n  [inst : LinearOrder I] →\n    (C : Set (I → Bool)) → { l // Profinite.NobelingProof.Products.isGood C l } → LocallyConstant ↑C ℤ","name":"Profinite.NobelingProof.GoodProducts.eval","isProp":false,"docString":"Evaluation of good products. ","distance":0.406198149104416206256473742541857063770294189453125}],["right unitality ",{"type":"∀ {C : Type u₁} [inst : CategoryTheory.Category.{v₁, u₁} C] [inst_1 : CategoryTheory.MonoidalCategory C] {D : Type u₂}\n  [inst_2 : CategoryTheory.Category.{v₂, u₂} D] [inst_3 : CategoryTheory.MonoidalCategory D] {F : C → D}\n  [inst_4 : CategoryTheory.Functorial F] [self : CategoryTheory.LaxMonoidal F] (X : C),\n  (CategoryTheory.MonoidalCategory.rightUnitor (F X)).hom =\n    CategoryTheory.CategoryStruct.comp\n      (CategoryTheory.MonoidalCategory.tensorHom (CategoryTheory.CategoryStruct.id (F X)) CategoryTheory.LaxMonoidal.ε)\n      (CategoryTheory.CategoryStruct.comp (CategoryTheory.LaxMonoidal.μ X (𝟙_ C))\n        (CategoryTheory.map F (CategoryTheory.MonoidalCategory.rightUnitor X).hom))","name":"CategoryTheory.LaxMonoidal.right_unitality","isProp":true,"docString":"right unitality ","distance":0.4065815020392109513380773933022283017635345458984375}],["The supremum is continuous ",{"type":"∀ {L : Type u_1} [inst : TopologicalSpace L] [inst_1 : Sup L] [self : ContinuousSup L], Continuous fun p => p.1 ⊔ p.2","name":"ContinuousSup.continuous_sup","isProp":true,"docString":"The supremum is continuous ","distance":0.4073393409690198030403962548007257282733917236328125}],["Greatest common divisor of a finite set ",{"type":"{α : Type u_1} →\n  {β : Type u_2} → [inst : CancelCommMonoidWithZero α] → [inst : NormalizedGCDMonoid α] → Finset β → (β → α) → α","name":"Finset.gcd","isProp":false,"docString":"Greatest common divisor of a finite set ","distance":0.408057075828277271423161209895624779164791107177734375}],["A finset is bounded above. ",{"type":"∀ {α : Type u} [inst : SemilatticeSup α] [inst_1 : Nonempty α] (s : Finset α), BddAbove ↑s","name":"Finset.bddAbove","isProp":true,"docString":"A finset is bounded above. ","distance":0.4081120768100749973683605276164598762989044189453125}]]