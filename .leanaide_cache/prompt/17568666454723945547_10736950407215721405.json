[["The sum of the values of an odd function is 0. ",{"type":"∀ {α : Type u_3} {β : Type u_4} [inst : AddCommGroup β] [inst_1 : NoZeroSMulDivisors ℕ β] [inst_2 : Fintype α]\n  [inst_3 : InvolutiveNeg α] {f : α → β}, Function.Odd f → ∑ a : α, f a = 0","name":"Function.Odd.sum_eq_zero","isProp":true,"docString":"The sum of the values of an odd function is 0. ","distance":0.5258150590334456087049375128117389976978302001953125}],[" The sum of two integers is even if and only if both integers are even.",{"type":"∀ {n : ℤ}, Even n = (n % 2 = 0)","name":"Mathlib.Data.Int.Parity._auxLemma.21","isProp":true,"docString":" The sum of two integers is even if and only if both integers are even.","distance":0.364542912836612220672805051435716450214385986328125}],["This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.",{"type":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)","name":"Nat.even_add","isProp":true,"docString":"This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.","distance":0.635596844079401090965575349400751292705535888671875}],["Any constant function is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] (b : β), Function.Even fun x => b","name":"Function.Even.const","isProp":true,"docString":"Any constant function is even. ","distance":0.74225050867749364780223686466342769563198089599609375}],[" The sum of two natural numbers is even if and only if both numbers are even or both are odd.",{"type":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)","name":"Nat.even_add","isProp":true,"docString":" The sum of two natural numbers is even if and only if both numbers are even or both are odd.","distance":0.38999741655680242313763983474927954375743865966796875}],["The theorem `Mathlib.Algebra.GeomSum._auxLemma.5` states that for any natural number `n`, the property of `n + 1` being even is equivalent to `n` being not even. In terms of mathematics, this says that if a natural number is even, then adding 1 to it makes it not even, and vice versa.",{"type":"∀ {n : ℕ}, Even (n + 1) = ¬Even n","name":"Mathlib.Algebra.GeomSum._auxLemma.5","isProp":true,"docString":"The theorem `Mathlib.Algebra.GeomSum._auxLemma.5` states that for any natural number `n`, the property of `n + 1` being even is equivalent to `n` being not even. In terms of mathematics, this says that if a natural number is even, then adding 1 to it makes it not even, and vice versa.","distance":0.73056156144937889340695846840390004217624664306640625}],["The convolution of two even functions is also even. ",{"type":"∀ {\u0000\u0000 : Type u\u0000\u0000} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\n  [inst_3 : NontriviallyNormedField \u0000\u0000] [inst_4 : NormedSpace \u0000\u0000 E] [inst_5 : NormedSpace \u0000\u0000 E'] [inst_6 : NormedSpace \u0000\u0000 F]\n  (L : E →L[\u0000\u0000] E' →L[\u0000\u0000] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\n  [inst_9 : AddCommGroup G] [inst_10 : μ.IsAddLeftInvariant] [inst_11 : μ.IsNegInvariant] [inst_12 : MeasurableNeg G]\n  [inst_13 : MeasurableAdd G],\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) →\n    (∀ᵐ (x : G) ∂μ, g (-x) = g x) → MeasureTheory.convolution f g L μ (-x) = MeasureTheory.convolution f g L μ x","name":"MeasureTheory.convolution_neg_of_neg_eq","isProp":true,"docString":"The convolution of two even functions is also even. ","distance":0.74501215639983364713572200344060547649860382080078125}],["If `n` is even and `a` is even, then `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even n → Even a → Even (n % a)","name":"Even.mod_even","isProp":true,"docString":"If `n` is even and `a` is even, then `n % a` is even. ","distance":0.77839533958920748002441314383759163320064544677734375}],["In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ",{"type":"∀ {n : ℕ} {k : Fin n}, Even k ↔ Odd n ∨ Even ↑k","name":"Fin.even_iff","isProp":true,"docString":"In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ","distance":0.8031123869833589612454716188949532806873321533203125}],["If `a` is even, then `n` is even iff `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n)","name":"Even.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is even iff `n % a` is even. ","distance":0.81291347113519829559180607247981242835521697998046875}],["If `a` is even, then `n` is odd iff `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n)","name":"Odd.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is odd iff `n % a` is odd. ","distance":0.85130157114412086105659227541764266788959503173828125}],["Folds a monadic function over the elements in the map (in arbitrary order).\n```\ndef sumEven (sum: Nat) (k : String) (v : Nat) : Except String Nat :=\n  if v % 2 == 0 then pure (sum + v) else throw s!\"value {v} at key {k} is not even\"\n\nfoldM sumEven 0 (ofList [(\"one\", 1), (\"three\", 3)]) =\n  Except.error \"value 3 at key three is not even\"\nfoldM sumEven 0 (ofList [(\"two\", 2), (\"four\", 4)]) = Except.ok 6\n```\n",{"type":"{α : Type u_1} →\n  {x : BEq α} →\n    {x_1 : Hashable α} →\n      {m : Type u_2 → Type u_3} →\n        {δ : Type u_2} → {β : Type u_4} → [inst : Monad m] → (δ → α → β → m δ) → δ → Batteries.HashMap α β → m δ","name":"Batteries.HashMap.foldM","isProp":false,"docString":"Folds a monadic function over the elements in the map (in arbitrary order).\n```\ndef sumEven (sum: Nat) (k : String) (v : Nat) : Except String Nat :=\n  if v % 2 == 0 then pure (sum + v) else throw s!\"value {v} at key {k} is not even\"\n\nfoldM sumEven 0 (ofList [(\"one\", 1), (\"three\", 3)]) =\n  Except.error \"value 3 at key three is not even\"\nfoldM sumEven 0 (ofList [(\"two\", 2), (\"four\", 4)]) = Except.ok 6\n```\n","distance":0.85744375734029210089914840864366851747035980224609375}],["If `f` is even and `g` is odd, then `f ∘ g` is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] {γ : Type u_3} [inst_1 : Neg β] {f : β → γ},\n  Function.Even f → ∀ {g : α → β}, Function.Odd g → Function.Even (f ∘ g)","name":"Function.Even.comp_odd","isProp":true,"docString":"If `f` is even and `g` is odd, then `f ∘ g` is even. ","distance":0.85810838328707628175351374011370353400707244873046875}],["If `n` is odd and `a` is even, then `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Odd n → Even a → Odd (n % a)","name":"Odd.mod_even","isProp":true,"docString":"If `n` is odd and `a` is even, then `n % a` is odd. ","distance":0.8656526119101950467182859938475303351879119873046875}],["In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ",{"type":"∀ {n : ℕ} [inst : NeZero n] {k : Fin n}, Odd k ↔ Odd n ∨ Odd ↑k","name":"Fin.odd_iff","isProp":true,"docString":"In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ","distance":0.87945599971440435727032536306069232523441314697265625}],["The set of natural numbers that are sums of two squares is closed under multiplication. ",{"type":"∀ {a b x y u v : ℕ}, a = x ^ 2 + y ^ 2 → b = u ^ 2 + v ^ 2 → ∃ r s, a * b = r ^ 2 + s ^ 2","name":"Nat.sq_add_sq_mul","isProp":true,"docString":"The set of natural numbers that are sums of two squares is closed under multiplication. ","distance":0.898459977753969685210222451132722198963165283203125}],["A sum is add-regular if and only if the summands are.",{"type":"∀ {R : Type u_1} [inst : AddCommSemigroup R] {a b : R}, IsAddRegular (a + b) ↔ IsAddRegular a ∧ IsAddRegular b","name":"isAddRegular_add_iff","isProp":true,"docString":"A sum is add-regular if and only if the summands are.","distance":0.898843596000159283931907339137978851795196533203125}],["Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ",{"type":"{P : ℕ → Sort u_1} →\n  ((n : ℕ) → ((k : ℕ) → k < 2 * n → P k) → P (2 * n)) →\n    ((n : ℕ) → ((k : ℕ) → k < 2 * n + 1 → P k) → P (2 * n + 1)) → (n : ℕ) → P n","name":"Nat.evenOddStrongRec","isProp":false,"docString":"Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ","distance":0.90008156062135125097256604931317269802093505859375}],["positive integers summing to `n`",{"type":"{n : ℕ} → n.Partition → Multiset ℕ","name":"Nat.Partition.parts","isProp":false,"docString":"positive integers summing to `n`","distance":0.90872077359632463799954393834923394024372100830078125}],["The degree-sum formula.  This is also known as the handshaking lemma, which might\nmore specifically refer to `SimpleGraph.even_card_odd_degree_vertices`. ",{"type":"∀ {V : Type u} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj],\n  ∑ v : V, G.degree v = 2 * G.edgeFinset.card","name":"SimpleGraph.sum_degrees_eq_twice_card_edges","isProp":true,"docString":"The degree-sum formula.  This is also known as the handshaking lemma, which might\nmore specifically refer to `SimpleGraph.even_card_odd_degree_vertices`. ","distance":0.91312911467830903955444910025107674300670623779296875}],["If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ",{"type":"∀ {m n : ℕ}, Even (m ^ n) ↔ Even m ∧ n ≠ 0","name":"Nat.even_pow","isProp":true,"docString":"If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ","distance":0.91908829802056779545438303102855570614337921142578125}],["A function `f` is _even_ if it satisfies `f (-x) = f x` for all `x`. ",{"type":"{α : Type u_1} → {β : Type u_2} → [inst : Neg α] → (α → β) → Prop","name":"Function.Even","isProp":false,"docString":"A function `f` is _even_ if it satisfies `f (-x) = f x` for all `x`. ","distance":0.92233614525430940300765314532327465713024139404296875}],["The even or odd submodule, defined as the supremum of the even or odd powers of\n`(ι Q).range`. `evenOdd 0` is the even submodule, and `evenOdd 1` is the odd submodule. ",{"type":"{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : CommRing R] →\n      [inst_1 : AddCommGroup M] →\n        [inst_2 : Module R M] → (Q : QuadraticForm R M) → ZMod 2 → Submodule R (CliffordAlgebra Q)","name":"CliffordAlgebra.evenOdd","isProp":false,"docString":"The even or odd submodule, defined as the supremum of the even or odd powers of\n`(ι Q).range`. `evenOdd 0` is the even submodule, and `evenOdd 1` is the odd submodule. ","distance":0.92378222516502950245609326884732581675052642822265625}],["The L-function of an even function vanishes at negative even integers. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {Φ : ZMod N → ℂ}, Function.Even Φ → ∀ (n : ℕ), ZMod.LFunction Φ (-(2 * (↑n + 1))) = 0","name":"ZMod.LFunction_neg_two_mul_nat_add_one","isProp":true,"docString":"The L-function of an even function vanishes at negative even integers. ","distance":0.93135355102637917834584868614911101758480072021484375}]]