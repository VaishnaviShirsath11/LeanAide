[["If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","distance":0.272178265983085643231476069558993913233280181884765625}],[" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)","distance":0.235584760499176315562408490222878754138946533203125}],["This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","distance":0.2155216578914132818933779844883247278630733489990234375}],[" The descending factorial of a natural number `n` at `k+1` equals the product of `(n-k)` and the descending factorial of `n` at `k`. In other words, `n.descFactorial (k+1) = (n-k) * n.descFactorial k`.",{"value":null,"type":"∀ (n k : ℕ), n.descFactorial (k + 1) = (n - k) * n.descFactorial k","statement":"theorem Nat.descFactorial_succ : ∀ (n k : ℕ), n.descFactorial (k + 1) = (n - k) * n.descFactorial k := by sorry","name":"Nat.descFactorial_succ","isProp":true,"description":"The theorem `Nat.descFactorial_succ` states that for any two natural numbers `n` and `k`, the descending factorial of `n` at `(k + 1)` is equal to the product of `(n - k)` and the descending factorial of `n` at `k`. In mathematical terms, this means that `n.descFactorial (k + 1) = (n - k) * n.descFactorial k`. The descending factorial, `n.descFactorial k`, is defined as the factorial of `n` divided by the factorial of `(n - k)`, implemented recursively.","concise-description":" The descending factorial of a natural number `n` at `k+1` equals the product of `(n-k)` and the descending factorial of `n` at `k`. In other words, `n.descFactorial (k+1) = (n-k) * n.descFactorial k`."}],["The sequence of natural numbers some 0, some 1, ... ",{"type":"Stream'.Seq ℕ","name":"Stream'.Seq.nats","isProp":false,"docString":"The sequence of natural numbers some 0, some 1, ... ","distance":0.274806178170738879540380139587796293199062347412109375}],[" For any natural numbers n and k with k <= n, the product of the factorial of (n-k) and the descending factorial of n by k is equal to the factorial of n.",{"type":"∀ {n k : ℕ}, k ≤ n → (n - k).factorial * n.descFactorial k = n.factorial","name":"Nat.factorial_mul_descFactorial","isProp":true,"docString":" For any natural numbers n and k with k <= n, the product of the factorial of (n-k) and the descending factorial of n by k is equal to the factorial of n.","distance":0.2357038505100493008814765971692395396530628204345703125}],["This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.",{"type":"∀ {n : ℕ}, n ≠ 0 → ∃ k, n = k.succ","name":"Nat.exists_eq_succ_of_ne_zero","isProp":true,"docString":"This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.","distance":0.22797358982851623210308389388956129550933837890625}],["Count the number of naturals `k < n` satisfying `p k`. ",{"type":"(p : ℕ → Prop) → [inst : DecidablePred p] → ℕ → ℕ","name":"Nat.count","isProp":false,"docString":"Count the number of naturals `k < n` satisfying `p k`. ","distance":0.27545120642031495350465775118209421634674072265625}],[" For all natural numbers n, the (n+2)-th Fibonacci number is equal to the sum of the n-th and (n+1)-th Fibonacci numbers.",{"type":"∀ {n : ℕ}, (n + 2).fib = n.fib + (n + 1).fib","name":"Nat.fib_add_two","isProp":true,"docString":" For all natural numbers n, the (n+2)-th Fibonacci number is equal to the sum of the n-th and (n+1)-th Fibonacci numbers.","distance":0.2432625726394182785750075481701060198247432708740234375}],["This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.",{"type":"∀ {k n : ℕ}, 0 < k → n < n + k","name":"Nat.lt_add_of_pos_right","isProp":true,"docString":"This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.","distance":0.234521126795399326159241581990499980747699737548828125}],["`choose n 2` is the `n`-th triangle number. ",{"type":"∀ (n : ℕ), Nat.choose n 2 = n * (n - 1) / 2","name":"Nat.choose_two_right","isProp":true,"docString":"`choose n 2` is the `n`-th triangle number. ","distance":0.27623165396297000295788848234224133193492889404296875}],[" For any natural numbers $n$ and $k$ with $k \\leq n$, the product of each prime $p$ raised to the power of its exponent in the prime factorization of binomial coefficient $n \\choose k$ equals $n \\choose k$.",{"type":"∀ (n k : ℕ), k ≤ n → ((Finset.range (n + 1)).prod fun p => p ^ (n.choose k).factorization p) = n.choose k","name":"Nat.prod_pow_factorization_choose","isProp":true,"docString":" For any natural numbers $n$ and $k$ with $k \\leq n$, the product of each prime $p$ raised to the power of its exponent in the prime factorization of binomial coefficient $n \\choose k$ equals $n \\choose k$.","distance":0.252577017352106303338388215706800110638141632080078125}],["This theorem states that for any two natural numbers `m` and `n`, if `m` is less than `n`, then there exists a natural number `k` such that `n` is equal to `m + k + 1`. In other words, if one natural number is smaller than another, you can find some natural number that when added to the smaller number and one, gives you the larger number.",{"type":"∀ {m n : ℕ}, m < n → ∃ k, n = m + k + 1","name":"Nat.exists_eq_add_of_lt","isProp":true,"docString":"This theorem states that for any two natural numbers `m` and `n`, if `m` is less than `n`, then there exists a natural number `k` such that `n` is equal to `m + k + 1`. In other words, if one natural number is smaller than another, you can find some natural number that when added to the smaller number and one, gives you the larger number.","distance":0.2440993960706416554540254537641885690391063690185546875}],["For any `p`, the power of `p` in `n^k` is `k` times the power in `n` ",{"type":"∀ (n k : ℕ), Nat.factorization (n ^ k) = k • Nat.factorization n","name":"Nat.factorization_pow","isProp":true,"docString":"For any `p`, the power of `p` in `n^k` is `k` times the power in `n` ","distance":0.28104555373261452810851324102259241044521331787109375}],["`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ",{"type":"{R : Type u_1} → [inst : CommMonoidWithZero R] → R → Prop","name":"IsPrimePow","isProp":false,"docString":"`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ","distance":0.2816156217548699824959612669772468507289886474609375}],["The recurrence relation satisfied by the Fibonacci sequence. ",{"type":"{α : Type u_1} → [inst : CommSemiring α] → LinearRecurrence α","name":"fibRec","isProp":false,"docString":"The recurrence relation satisfied by the Fibonacci sequence. ","distance":0.283522368716230432905689440303831361234188079833984375}],["A `k`-smooth number can be written as a square times a product of distinct primes `< k`. ",{"type":"∀ {n k : ℕ}, n ∈ Nat.smoothNumbers k → ∃ s ∈ Finset.powerset (Nat.primesBelow k), ∃ m, n = m ^ 2 * Finset.prod s id","name":"Nat.eq_prod_primes_mul_sq_of_mem_smoothNumbers","isProp":true,"docString":"A `k`-smooth number can be written as a square times a product of distinct primes `< k`. ","distance":0.284810001861130313027814509041490964591503143310546875}]]