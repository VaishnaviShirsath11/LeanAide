[["The zero function is odd. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] [inst_1 : NegZeroClass β], Function.Odd fun x => 0","name":"Function.Odd.zero","isProp":true,"docString":"The zero function is odd. ","distance":0.7044675063806724590875774083542637526988983154296875}],[" A natural number is odd if and only if it is not even, or equivalently, a natural number is odd if and only if it can be expressed as 2 times an integer plus one, while an even number can be expressed as the sum of two integers.",{"type":"∀ {n : ℕ}, Odd n ↔ ¬Even n","name":"Nat.odd_iff_not_even","isProp":true,"docString":" A natural number is odd if and only if it is not even, or equivalently, a natural number is odd if and only if it can be expressed as 2 times an integer plus one, while an even number can be expressed as the sum of two integers.","distance":0.64121120373848139450956296059302985668182373046875}],["This theorem states that for every natural number `n`, `n` being odd is equivalent to `n` not being even. In other words, a natural number is odd if and only if it is not even. Here, a number is considered odd if it can be expressed as `2*k + 1` for some `k`, and a number is considered even if it can be written as `r + r` for some `r`.",{"type":"∀ {n : ℕ}, Odd n ↔ ¬Even n","name":"Nat.odd_iff_not_even","isProp":true,"docString":"This theorem states that for every natural number `n`, `n` being odd is equivalent to `n` not being even. In other words, a natural number is odd if and only if it is not even. Here, a number is considered odd if it can be expressed as `2*k + 1` for some `k`, and a number is considered even if it can be written as `r + r` for some `r`.","distance":0.683281780339466848772644880227744579315185546875}],["A natural number is odd iff it has residue `1` or `3` mod `4`",{"type":"∀ {n : ℕ}, n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3","name":"Nat.odd_mod_four_iff","isProp":true,"docString":"A natural number is odd iff it has residue `1` or `3` mod `4`","distance":0.7658527760454034716275373284588567912578582763671875}],[" Every natural number can be expressed as an even number (the sum of two identical numbers) or an odd number (2 times an integer plus 1).",{"type":"∀ (n : ℕ), Even n ∨ Odd n","name":"Nat.even_or_odd","isProp":true,"docString":" Every natural number can be expressed as an even number (the sum of two identical numbers) or an odd number (2 times an integer plus 1).","distance":0.65951605632841758808382337520015425980091094970703125}],["This theorem states that for every natural number `n`, `n` is even if and only if `n` is not odd. Here, a number is defined as being even if it can be expressed as the sum of two identical numbers, and as being odd if it can be represented as `2*k + 1` for some natural number `k`. In other words, a natural number cannot be both even and odd simultaneously.",{"type":"∀ {n : ℕ}, Even n ↔ ¬Odd n","name":"Nat.even_iff_not_odd","isProp":true,"docString":"This theorem states that for every natural number `n`, `n` is even if and only if `n` is not odd. Here, a number is defined as being even if it can be expressed as the sum of two identical numbers, and as being odd if it can be represented as `2*k + 1` for some natural number `k`. In other words, a natural number cannot be both even and odd simultaneously.","distance":0.68358825325642913472989903311827220022678375244140625}],["The sum of the values of an odd function is 0. ",{"type":"∀ {α : Type u_3} {β : Type u_4} [inst : AddCommGroup β] [inst_1 : NoZeroSMulDivisors ℕ β] [inst_2 : Fintype α]\n  [inst_3 : InvolutiveNeg α] {f : α → β}, Function.Odd f → ∑ a : α, f a = 0","name":"Function.Odd.sum_eq_zero","isProp":true,"docString":"The sum of the values of an odd function is 0. ","distance":0.77742105856143428610494083841331303119659423828125}],["If `a` is even, then `n` is odd iff `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n)","name":"Odd.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is odd iff `n % a` is odd. ","distance":0.79088678348311558519156960755935870110988616943359375}],["Any constant function is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] (b : β), Function.Even fun x => b","name":"Function.Even.const","isProp":true,"docString":"Any constant function is even. ","distance":0.7991754767406631376758241458446718752384185791015625}],["In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ",{"type":"∀ {n : ℕ} [inst : NeZero n] {k : Fin n}, Odd k ↔ Odd n ∨ Odd ↑k","name":"Fin.odd_iff","isProp":true,"docString":"In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ","distance":0.81709610931023679558649064347264356911182403564453125}],["If `n` is odd and `a` is even, then `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Odd n → Even a → Odd (n % a)","name":"Odd.mod_even","isProp":true,"docString":"If `n` is odd and `a` is even, then `n % a` is odd. ","distance":0.82150752734975884816748248340445570647716522216796875}],["In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ",{"type":"∀ {n : ℕ} {k : Fin n}, Even k ↔ Odd n ∨ Even ↑k","name":"Fin.even_iff","isProp":true,"docString":"In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ","distance":0.83063957758233264438985088418121449649333953857421875}],["If `n` is even and `a` is even, then `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even n → Even a → Even (n % a)","name":"Even.mod_even","isProp":true,"docString":"If `n` is even and `a` is even, then `n % a` is even. ","distance":0.86161348678922033972327199080609716475009918212890625}],["The L-function of an odd function vanishes at negative odd integers. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {Φ : ZMod N → ℂ}, Function.Odd Φ → ∀ (n : ℕ), ZMod.LFunction Φ (-(2 * ↑n) - 1) = 0","name":"ZMod.LFunction_neg_two_mul_nat_sub_one","isProp":true,"docString":"The L-function of an odd function vanishes at negative odd integers. ","distance":0.877802601471521892761984418029896914958953857421875}],["The zero function is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] [inst_1 : Zero β], Function.Even fun x => 0","name":"Function.Even.zero","isProp":true,"docString":"The zero function is even. ","distance":0.88107430841835643331450000914628617465496063232421875}],["If `a` is even, then `n` is even iff `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n)","name":"Even.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is even iff `n % a` is even. ","distance":0.890264069114042211339210552978329360485076904296875}],["The even or odd submodule, defined as the supremum of the even or odd powers of\n`(ι Q).range`. `evenOdd 0` is the even submodule, and `evenOdd 1` is the odd submodule. ",{"type":"{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : CommRing R] →\n      [inst_1 : AddCommGroup M] →\n        [inst_2 : Module R M] → (Q : QuadraticForm R M) → ZMod 2 → Submodule R (CliffordAlgebra Q)","name":"CliffordAlgebra.evenOdd","isProp":false,"docString":"The even or odd submodule, defined as the supremum of the even or odd powers of\n`(ι Q).range`. `evenOdd 0` is the even submodule, and `evenOdd 1` is the odd submodule. ","distance":0.893303925690532185655001740087755024433135986328125}],["The convolution of two even functions is also even. ",{"type":"∀ {\u0000\u0000 : Type u\u0000\u0000} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\n  [inst_3 : NontriviallyNormedField \u0000\u0000] [inst_4 : NormedSpace \u0000\u0000 E] [inst_5 : NormedSpace \u0000\u0000 E'] [inst_6 : NormedSpace \u0000\u0000 F]\n  (L : E →L[\u0000\u0000] E' →L[\u0000\u0000] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\n  [inst_9 : AddCommGroup G] [inst_10 : μ.IsAddLeftInvariant] [inst_11 : μ.IsNegInvariant] [inst_12 : MeasurableNeg G]\n  [inst_13 : MeasurableAdd G],\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) →\n    (∀ᵐ (x : G) ∂μ, g (-x) = g x) → MeasureTheory.convolution f g L μ (-x) = MeasureTheory.convolution f g L μ x","name":"MeasureTheory.convolution_neg_of_neg_eq","isProp":true,"docString":"The convolution of two even functions is also even. ","distance":0.898171524286064393294282126589678227901458740234375}],["The finset of those partitions in which every part is odd. ",{"type":"(n : ℕ) → Finset n.Partition","name":"Nat.Partition.odds","isProp":false,"docString":"The finset of those partitions in which every part is odd. ","distance":0.898294554600669759025777239003218710422515869140625}],["`2` is not a factor of an odd natural number. ",{"type":"∀ {m n : ℕ}, Odd n → m ∣ n → m ≠ 2","name":"Odd.ne_two_of_dvd_nat","isProp":true,"docString":"`2` is not a factor of an odd natural number. ","distance":0.91499849614046457890736974150058813393115997314453125}],["`bodd n` returns `true` if `n` is odd ",{"type":"ℕ → Bool","name":"Nat.bodd","isProp":false,"docString":"`bodd n` returns `true` if `n` is odd ","distance":0.9285093095229124404710319140576757490634918212890625}],["If `f` is even and `g` is odd, then `f ∘ g` is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] {γ : Type u_3} [inst_1 : Neg β] {f : β → γ},\n  Function.Even f → ∀ {g : α → β}, Function.Odd g → Function.Even (f ∘ g)","name":"Function.Even.comp_odd","isProp":true,"docString":"If `f` is even and `g` is odd, then `f ∘ g` is even. ","distance":0.93615775640264675683255291005480103194713592529296875}],["The L-function of an even function vanishes at negative even integers. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {Φ : ZMod N → ℂ}, Function.Even Φ → ∀ (n : ℕ), ZMod.LFunction Φ (-(2 * (↑n + 1))) = 0","name":"ZMod.LFunction_neg_two_mul_nat_add_one","isProp":true,"docString":"The L-function of an even function vanishes at negative even integers. ","distance":0.9374326904385459346968900717911310493946075439453125}],["A function `f` is _odd_ if it satisfies `f (-x) = -f x` for all `x`. ",{"type":"{α : Type u_1} → {β : Type u_2} → [inst : Neg α] → [inst : Neg β] → (α → β) → Prop","name":"Function.Odd","isProp":false,"docString":"A function `f` is _odd_ if it satisfies `f (-x) = -f x` for all `x`. ","distance":0.9397968492324964007167409363319166004657745361328125}]]