[["The sum of the values of an odd function is 0. ",{"type":"∀ {α : Type u_3} {β : Type u_4} [inst : AddCommGroup β] [inst_1 : NoZeroSMulDivisors ℕ β] [inst_2 : Fintype α]\n  [inst_3 : InvolutiveNeg α] {f : α → β}, Function.Odd f → ∑ a : α, f a = 0","name":"Function.Odd.sum_eq_zero","isProp":true,"docString":"The sum of the values of an odd function is 0. ","distance":0.56758426784311899471191509292111732065677642822265625}],[" The sum of two integers is even if and only if both integers are even.",{"type":"∀ {n : ℤ}, Even n = (n % 2 = 0)","name":"Mathlib.Data.Int.Parity._auxLemma.21","isProp":true,"docString":" The sum of two integers is even if and only if both integers are even.","distance":0.40448711049782104520744496767292730510234832763671875}],["This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.",{"type":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)","name":"Nat.even_add","isProp":true,"docString":"This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.","distance":0.63576378345611062048448047789861448109149932861328125}],["Any constant function is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] (b : β), Function.Even fun x => b","name":"Function.Even.const","isProp":true,"docString":"Any constant function is even. ","distance":0.79052286378446512404849499944248236715793609619140625}],[" The sum of two natural numbers is even if and only if both numbers are even or both are odd.",{"type":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)","name":"Nat.even_add","isProp":true,"docString":" The sum of two natural numbers is even if and only if both numbers are even or both are odd.","distance":0.41481964811261529124664093615137971937656402587890625}],["The theorem `Mathlib.Algebra.GeomSum._auxLemma.5` states that for any natural number `n`, the property of `n + 1` being even is equivalent to `n` being not even. In terms of mathematics, this says that if a natural number is even, then adding 1 to it makes it not even, and vice versa.",{"type":"∀ {n : ℕ}, Even (n + 1) = ¬Even n","name":"Mathlib.Algebra.GeomSum._auxLemma.5","isProp":true,"docString":"The theorem `Mathlib.Algebra.GeomSum._auxLemma.5` states that for any natural number `n`, the property of `n + 1` being even is equivalent to `n` being not even. In terms of mathematics, this says that if a natural number is even, then adding 1 to it makes it not even, and vice versa.","distance":0.74089810638499364880971143065835349261760711669921875}],["The convolution of two even functions is also even. ",{"type":"∀ {\u0000\u0000 : Type u\u0000\u0000} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\n  [inst_3 : NontriviallyNormedField \u0000\u0000] [inst_4 : NormedSpace \u0000\u0000 E] [inst_5 : NormedSpace \u0000\u0000 E'] [inst_6 : NormedSpace \u0000\u0000 F]\n  (L : E →L[\u0000\u0000] E' →L[\u0000\u0000] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\n  [inst_9 : AddCommGroup G] [inst_10 : μ.IsAddLeftInvariant] [inst_11 : μ.IsNegInvariant] [inst_12 : MeasurableNeg G]\n  [inst_13 : MeasurableAdd G],\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) →\n    (∀ᵐ (x : G) ∂μ, g (-x) = g x) → MeasureTheory.convolution f g L μ (-x) = MeasureTheory.convolution f g L μ x","name":"MeasureTheory.convolution_neg_of_neg_eq","isProp":true,"docString":"The convolution of two even functions is also even. ","distance":0.819008313855658531821291035157628357410430908203125}],["In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ",{"type":"∀ {n : ℕ} {k : Fin n}, Even k ↔ Odd n ∨ Even ↑k","name":"Fin.even_iff","isProp":true,"docString":"In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ","distance":0.8241458104275680707218043608008883893489837646484375}],["If `n` is even and `a` is even, then `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even n → Even a → Even (n % a)","name":"Even.mod_even","isProp":true,"docString":"If `n` is even and `a` is even, then `n % a` is even. ","distance":0.8300636479108927101577819485100917518138885498046875}],["Folds a monadic function over the elements in the map (in arbitrary order).\n```\ndef sumEven (sum: Nat) (k : String) (v : Nat) : Except String Nat :=\n  if v % 2 == 0 then pure (sum + v) else throw s!\"value {v} at key {k} is not even\"\n\nfoldM sumEven 0 (ofList [(\"one\", 1), (\"three\", 3)]) =\n  Except.error \"value 3 at key three is not even\"\nfoldM sumEven 0 (ofList [(\"two\", 2), (\"four\", 4)]) = Except.ok 6\n```\n",{"type":"{α : Type u_1} →\n  {x : BEq α} →\n    {x_1 : Hashable α} →\n      {m : Type u_2 → Type u_3} →\n        {δ : Type u_2} → {β : Type u_4} → [inst : Monad m] → (δ → α → β → m δ) → δ → Batteries.HashMap α β → m δ","name":"Batteries.HashMap.foldM","isProp":false,"docString":"Folds a monadic function over the elements in the map (in arbitrary order).\n```\ndef sumEven (sum: Nat) (k : String) (v : Nat) : Except String Nat :=\n  if v % 2 == 0 then pure (sum + v) else throw s!\"value {v} at key {k} is not even\"\n\nfoldM sumEven 0 (ofList [(\"one\", 1), (\"three\", 3)]) =\n  Except.error \"value 3 at key three is not even\"\nfoldM sumEven 0 (ofList [(\"two\", 2), (\"four\", 4)]) = Except.ok 6\n```\n","distance":0.84229952130921736941360222772345878183841705322265625}],["If `a` is even, then `n` is even iff `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n)","name":"Even.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is even iff `n % a` is even. ","distance":0.85711729945072334668765279275248758494853973388671875}],["positive integers summing to `n`",{"type":"{n : ℕ} → n.Partition → Multiset ℕ","name":"Nat.Partition.parts","isProp":false,"docString":"positive integers summing to `n`","distance":0.85755651393068610399694762236322276294231414794921875}],["If `a` is even, then `n` is odd iff `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n)","name":"Odd.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is odd iff `n % a` is odd. ","distance":0.87621778922129667233065219988930039107799530029296875}],["In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ",{"type":"∀ {n : ℕ} [inst : NeZero n] {k : Fin n}, Odd k ↔ Odd n ∨ Odd ↑k","name":"Fin.odd_iff","isProp":true,"docString":"In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ","distance":0.893167705069396244965673758997581899166107177734375}],["If `n` is odd and `a` is even, then `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Odd n → Even a → Odd (n % a)","name":"Odd.mod_even","isProp":true,"docString":"If `n` is odd and `a` is even, then `n % a` is odd. ","distance":0.89836350466403380732316463763709180057048797607421875}],["Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ",{"type":"{P : ℕ → Sort u_1} →\n  ((n : ℕ) → ((k : ℕ) → k < 2 * n → P k) → P (2 * n)) →\n    ((n : ℕ) → ((k : ℕ) → k < 2 * n + 1 → P k) → P (2 * n + 1)) → (n : ℕ) → P n","name":"Nat.evenOddStrongRec","isProp":false,"docString":"Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ","distance":0.89955385055351289036451589709031395614147186279296875}],["If `f` is even and `g` is odd, then `f ∘ g` is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] {γ : Type u_3} [inst_1 : Neg β] {f : β → γ},\n  Function.Even f → ∀ {g : α → β}, Function.Odd g → Function.Even (f ∘ g)","name":"Function.Even.comp_odd","isProp":true,"docString":"If `f` is even and `g` is odd, then `f ∘ g` is even. ","distance":0.9016578047012497876266934326849877834320068359375}],["The even or odd submodule, defined as the supremum of the even or odd powers of\n`(ι Q).range`. `evenOdd 0` is the even submodule, and `evenOdd 1` is the odd submodule. ",{"type":"{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : CommRing R] →\n      [inst_1 : AddCommGroup M] →\n        [inst_2 : Module R M] → (Q : QuadraticForm R M) → ZMod 2 → Submodule R (CliffordAlgebra Q)","name":"CliffordAlgebra.evenOdd","isProp":false,"docString":"The even or odd submodule, defined as the supremum of the even or odd powers of\n`(ι Q).range`. `evenOdd 0` is the even submodule, and `evenOdd 1` is the odd submodule. ","distance":0.9152906525454886921266961508081294596195220947265625}],["The degree-sum formula.  This is also known as the handshaking lemma, which might\nmore specifically refer to `SimpleGraph.even_card_odd_degree_vertices`. ",{"type":"∀ {V : Type u} (G : SimpleGraph V) [inst : Fintype V] [inst_1 : DecidableRel G.Adj],\n  ∑ v : V, G.degree v = 2 * G.edgeFinset.card","name":"SimpleGraph.sum_degrees_eq_twice_card_edges","isProp":true,"docString":"The degree-sum formula.  This is also known as the handshaking lemma, which might\nmore specifically refer to `SimpleGraph.even_card_odd_degree_vertices`. ","distance":0.92858980479306507671566350836656056344509124755859375}],["Sum of a list of natural numbers. ",{"type":"List ℕ → ℕ","name":"Nat.sum","isProp":false,"docString":"Sum of a list of natural numbers. ","distance":0.9395277841605444990591422538273036479949951171875}],["**Sum of a Geometric Series** ",{"type":"∀ {r : NNReal}, r < 1 → HasSum (fun n => r ^ n) (1 - r)⁻¹","name":"NNReal.hasSum_geometric","isProp":true,"docString":"**Sum of a Geometric Series** ","distance":0.9518283706897865403817604601499624550342559814453125}],["List of positive integers summing to `n`",{"type":"{n : ℕ} → Composition n → List ℕ","name":"Composition.blocks","isProp":false,"docString":"List of positive integers summing to `n`","distance":0.9558386564641312421741758953430689871311187744140625}],["If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ",{"type":"∀ {m n : ℕ}, Even (m ^ n) ↔ Even m ∧ n ≠ 0","name":"Nat.even_pow","isProp":true,"docString":"If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ","distance":0.95932276395709425997893049498088657855987548828125}],["A function `f` is _even_ if it satisfies `f (-x) = f x` for all `x`. ",{"type":"{α : Type u_1} → {β : Type u_2} → [inst : Neg α] → (α → β) → Prop","name":"Function.Even","isProp":false,"docString":"A function `f` is _even_ if it satisfies `f (-x) = f x` for all `x`. ","distance":0.96040399865300785098298774755676276981830596923828125}]]