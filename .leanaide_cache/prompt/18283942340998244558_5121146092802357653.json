[["If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","distance":0.61304617929667504228063990012742578983306884765625}],[" For all natural numbers `k` and `n`, if `k > 0` then `n < n + k`.",{"type":"∀ {k n : ℕ}, 0 < k → n < n + k","name":"Nat.lt_add_of_pos_right","isProp":true,"docString":" For all natural numbers `k` and `n`, if `k > 0` then `n < n + k`.","distance":0.5855930944813554361871865694411098957061767578125}],["This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","distance":0.59309726588587452500433983004768379032611846923828125}],[" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)",{"value":null,"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","statement":"theorem PNat.exists_eq_succ_of_ne_one : ∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1 := by sorry","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","description":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","concise-description":" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)"}],["Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ",{"type":"(k : ℕ) → { n // n ∉ Multiset.range k } ≃ ℕ","name":"notMemRangeEquiv","isProp":false,"docString":"Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ","distance":0.731719441207093534984551297384314239025115966796875}],[" For all natural numbers `k` and `n`, if `k > 0` then `n < k + n`.",{"type":"∀ {k n : ℕ}, 0 < k → n < k + n","name":"Nat.lt_add_of_pos_left","isProp":true,"docString":" For all natural numbers `k` and `n`, if `k > 0` then `n < k + n`.","distance":0.59166089053564496769155311994836665689945220947265625}],["This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.",{"type":"∀ {n : ℕ}, n ≠ 0 → ∃ k, n = k.succ","name":"Nat.exists_eq_succ_of_ne_zero","isProp":true,"docString":"This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.","distance":0.6230214893018752864151110770762898027896881103515625}],[" The theorem `Nat.choose_succ_succ` in Lean 4 states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` equals the sum of the binomial coefficients of `n` choose `k` and `n` choose `k+1`. In mathematical notation, $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$.",{"value":null,"type":"∀ (n k : ℕ), n.succ.choose k.succ = n.choose k + n.choose k.succ","statement":"theorem Nat.choose_succ_succ : ∀ (n k : ℕ), n.succ.choose k.succ = n.choose k + n.choose k.succ := by sorry","name":"Nat.choose_succ_succ","isProp":true,"description":"The theorem `Nat.choose_succ_succ` is about binomial coefficients (commonly denoted by \"n choose k\") in combinatorics. It states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` is equal to the sum of the binomial coefficient of `n` choose `k` and the binomial coefficient of `n` choose `k+1`. In other words, this theorem is a formalization of the Pascal's Rule, which is a fundamental property of binomial coefficients used in combinatorial mathematics. The theorem may be written in LaTeX mathematics as: $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$.","concise-description":" The theorem `Nat.choose_succ_succ` in Lean 4 states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` equals the sum of the binomial coefficients of `n` choose `k` and `n` choose `k+1`. In mathematical notation, $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$."}],["`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ",{"type":"{R : Type u_1} → [inst : CommMonoidWithZero R] → R → Prop","name":"IsPrimePow","isProp":false,"docString":"`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ","distance":0.78923125011259676053754219537950120866298675537109375}],[" For all natural numbers `n` and `k`, `n ≤ n + k`.",{"type":"∀ (n k : ℕ), n ≤ n + k","name":"Nat.le_add_right","isProp":true,"docString":" For all natural numbers `n` and `k`, `n ≤ n + k`.","distance":0.620101425396361261022093458450399339199066162109375}],["This theorem states that for all natural numbers `n` and `k`, `n` is less than or equal to `n + k`. In mathematical terms, this theorem confirms that adding any natural number to another natural number results in a number that is either greater than or equal to the original number. It's an important foundational aspect of number theory and arithmetic.",{"type":"∀ (n k : ℕ), n ≤ n + k","name":"Nat.le_add_right","isProp":true,"docString":"This theorem states that for all natural numbers `n` and `k`, `n` is less than or equal to `n + k`. In mathematical terms, this theorem confirms that adding any natural number to another natural number results in a number that is either greater than or equal to the original number. It's an important foundational aspect of number theory and arithmetic.","distance":0.74765816823589148487627653594245202839374542236328125}],["For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ",{"type":"∀ {R : Type u_2} [inst : NormedRing R] (k : ℕ) {r : ℝ}, 1 < r → (fun n => ↑n ^ k) =o[Filter.atTop] fun n => r ^ n","name":"isLittleO_pow_const_const_pow_of_one_lt","isProp":true,"docString":"For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ","distance":0.7905617700036826622778107775957323610782623291015625}],[" A natural number `n` is equivalent to being odd, as defined in Lean 4, if and only if `n` modulo 2 equals 1, which is equivalent to `n` being expressible as `2*k + 1` for some natural number `k`.",{"type":"∀ {n : ℕ}, Odd n ↔ n % 2 = 1","name":"Nat.odd_iff","isProp":true,"docString":" A natural number `n` is equivalent to being odd, as defined in Lean 4, if and only if `n` modulo 2 equals 1, which is equivalent to `n` being expressible as `2*k + 1` for some natural number `k`.","distance":0.640451576260662402972911877441219985485076904296875}],["This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.",{"type":"∀ {k n : ℕ}, 0 < k → n < n + k","name":"Nat.lt_add_of_pos_right","isProp":true,"docString":"This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.","distance":0.777042075108257623838881045230664312839508056640625}],["If `n > 0` then `m` is not divisible by `n` iff it is between `n * k` and `n * (k + 1)`\nfor some `k`. ",{"type":"∀ {n : ℤ} (m : ℤ), 0 < n → ((∃ k, n * k < m ∧ m < n * (k + 1)) ↔ ¬n ∣ m)","name":"Int.exists_lt_and_lt_iff_not_dvd","isProp":true,"docString":"If `n > 0` then `m` is not divisible by `n` iff it is between `n * k` and `n * (k + 1)`\nfor some `k`. ","distance":0.8256214939922283946316383662633597850799560546875}],["If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\nthat are equal mod `k`. ",{"type":"∀ {s : Set ℕ}, s.Infinite → ∀ {k : ℕ}, 0 < k → ∃ m ∈ s, ∃ n ∈ s, m < n ∧ m ≡ n [MOD k]","name":"Nat.exists_lt_modEq_of_infinite","isProp":true,"docString":"If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\nthat are equal mod `k`. ","distance":0.8415126282448730510310497265891171991825103759765625}],["`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ",{"type":"{n : ℕ} → Fin2 n → (k : ℕ) → Fin2 (n + k)","name":"Fin2.add","isProp":false,"docString":"`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ","distance":0.84766263694607879575215747536276467144489288330078125}],["positive integers summing to `n`",{"type":"{n : ℕ} → n.Partition → Multiset ℕ","name":"Nat.Partition.parts","isProp":false,"docString":"positive integers summing to `n`","distance":0.85333167839980961222323685433366335928440093994140625}]]