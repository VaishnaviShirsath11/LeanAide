[["If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","distance":0.2050694098667321940698826665538945235311985015869140625}],[" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)","distance":0.2263076201933955922118713033341919071972370147705078125}],["This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","distance":0.2131604259518999899825075772241689264774322509765625}],[" The descending factorial of a natural number `n` at `k+1` equals the product of `(n-k)` and the descending factorial of `n` at `k`. In other words, `n.descFactorial (k+1) = (n-k) * n.descFactorial k`.",{"value":null,"type":"∀ (n k : ℕ), n.descFactorial (k + 1) = (n - k) * n.descFactorial k","statement":"theorem Nat.descFactorial_succ : ∀ (n k : ℕ), n.descFactorial (k + 1) = (n - k) * n.descFactorial k := by sorry","name":"Nat.descFactorial_succ","isProp":true,"description":"The theorem `Nat.descFactorial_succ` states that for any two natural numbers `n` and `k`, the descending factorial of `n` at `(k + 1)` is equal to the product of `(n - k)` and the descending factorial of `n` at `k`. In mathematical terms, this means that `n.descFactorial (k + 1) = (n - k) * n.descFactorial k`. The descending factorial, `n.descFactorial k`, is defined as the factorial of `n` divided by the factorial of `(n - k)`, implemented recursively.","concise-description":" The descending factorial of a natural number `n` at `k+1` equals the product of `(n-k)` and the descending factorial of `n` at `k`. In other words, `n.descFactorial (k+1) = (n-k) * n.descFactorial k`."}],["Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ",{"type":"(k : ℕ) → { n // n ∉ Multiset.range k } ≃ ℕ","name":"notMemRangeEquiv","isProp":false,"docString":"Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ","distance":0.2433939627078941791982202857980155386030673980712890625}],[" The theorem asserts that for all natural numbers n and k, the product of the binomial coefficient of n choose k+1 and k+1 equals the product of the binomial coefficient of n choose k and (n-k). In other words, $\\binom{n}{k+1} \\cdot (k+1) = \\binom{n}{k} \\cdot (n-k)$.",{"type":"∀ (n k : ℕ), n.choose (k + 1) * (k + 1) = n.choose k * (n - k)","name":"Nat.choose_succ_right_eq","isProp":true,"docString":" The theorem asserts that for all natural numbers n and k, the product of the binomial coefficient of n choose k+1 and k+1 equals the product of the binomial coefficient of n choose k and (n-k). In other words, $\\binom{n}{k+1} \\cdot (k+1) = \\binom{n}{k} \\cdot (n-k)$.","distance":0.250007691940812792896764449324109591543674468994140625}],["This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.",{"type":"∀ {n : ℕ}, n ≠ 0 → ∃ k, n = k.succ","name":"Nat.exists_eq_succ_of_ne_zero","isProp":true,"docString":"This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.","distance":0.2175876789583849613141097734114737249910831451416015625}],[" For any natural number `n` and `k`, the prime factorization of `n` raised to the power of `k` is `k` times the prime factorization of `n`. Equivalently, the power of each prime `p` in the prime factorization of `n^k` is `k` times its power in the prime factorization of `n`.",{"value":null,"type":"∀ (n k : ℕ), (n ^ k).factorization = k • n.factorization","statement":"theorem Nat.factorization_pow : ∀ (n k : ℕ), (n ^ k).factorization = k • n.factorization := by sorry","name":"Nat.factorization_pow","isProp":true,"docString":"For any `p`, the power of `p` in `n^k` is `k` times the power in `n` ","description":"This theorem states that for any natural numbers `n` and `k`, the prime factorization of `n` raised to the power of `k` is the same as `k` times the prime factorization of `n`. In other words, the multiplicity of each prime factor `p` in `n^k` is `k` times the multiplicity of `p` in `n`. This is equivalent to the mathematical statement that for any prime `p`, the power of `p` in the prime factorization of `n^k` is `k` times the power of `p` in the prime factorization of `n`.","concise-description":" For any natural number `n` and `k`, the prime factorization of `n` raised to the power of `k` is `k` times the prime factorization of `n`. Equivalently, the power of each prime `p` in the prime factorization of `n^k` is `k` times its power in the prime factorization of `n`."}],["A subset of `ℕ` containing `k : ℕ` and closed under `Nat.succ` contains every `n ≥ k`. ",{"type":"∀ {n k : ℕ} {S : Set ℕ}, k ∈ S → (∀ k ∈ S, k + 1 ∈ S) → k ≤ n → n ∈ S","name":"Nat.set_induction_bounded","isProp":true,"docString":"A subset of `ℕ` containing `k : ℕ` and closed under `Nat.succ` contains every `n ≥ k`. ","distance":0.2493344005453489165002878280574805103242397308349609375}],[" For any natural numbers n and k with k <= n, the product of the factorial of (n-k) and the descending factorial of n by k is equal to the factorial of n.",{"type":"∀ {n k : ℕ}, k ≤ n → (n - k).factorial * n.descFactorial k = n.factorial","name":"Nat.factorial_mul_descFactorial","isProp":true,"docString":" For any natural numbers n and k with k <= n, the product of the factorial of (n-k) and the descending factorial of n by k is equal to the factorial of n.","distance":0.252577315981156125257456324106897227466106414794921875}],["This theorem states that for any subset `S` of natural numbers `ℕ`, any arbitrary natural numbers `n` and `k`, if `k` is an element of `S` and `S` is closed under successor operation (meaning if `k` is in `S`, then `k + 1` is also in `S`), then every natural number `n` that is greater than or equal to `k` is also an element of `S`.",{"type":"∀ {n k : ℕ} {S : Set ℕ}, k ∈ S → (∀ k ∈ S, k + 1 ∈ S) → k ≤ n → n ∈ S","name":"Nat.set_induction_bounded","isProp":true,"docString":"This theorem states that for any subset `S` of natural numbers `ℕ`, any arbitrary natural numbers `n` and `k`, if `k` is an element of `S` and `S` is closed under successor operation (meaning if `k` is in `S`, then `k + 1` is also in `S`), then every natural number `n` that is greater than or equal to `k` is also an element of `S`.","distance":0.22936834337233713565495918373926542699337005615234375}],[" The theorem `Nat.choose_succ_succ` in Lean 4 states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` equals the sum of the binomial coefficients of `n` choose `k` and `n` choose `k+1`. In mathematical notation, $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$.",{"value":null,"type":"∀ (n k : ℕ), n.succ.choose k.succ = n.choose k + n.choose k.succ","statement":"theorem Nat.choose_succ_succ : ∀ (n k : ℕ), n.succ.choose k.succ = n.choose k + n.choose k.succ := by sorry","name":"Nat.choose_succ_succ","isProp":true,"description":"The theorem `Nat.choose_succ_succ` is about binomial coefficients (commonly denoted by \"n choose k\") in combinatorics. It states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` is equal to the sum of the binomial coefficient of `n` choose `k` and the binomial coefficient of `n` choose `k+1`. In other words, this theorem is a formalization of the Pascal's Rule, which is a fundamental property of binomial coefficients used in combinatorial mathematics. The theorem may be written in LaTeX mathematics as: $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$.","concise-description":" The theorem `Nat.choose_succ_succ` in Lean 4 states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` equals the sum of the binomial coefficients of `n` choose `k` and `n` choose `k+1`. In mathematical notation, $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$."}],["`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ",{"type":"{n : ℕ} → Fin2 n → (k : ℕ) → Fin2 (n + k)","name":"Fin2.add","isProp":false,"docString":"`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ","distance":0.25902437370704356478512409012182615697383880615234375}],[" For any natural numbers $n$ and $k$ with $k \\leq n$, the product of each prime $p$ raised to the power of its exponent in the prime factorization of binomial coefficient $n \\choose k$ equals $n \\choose k$.",{"type":"∀ (n k : ℕ), k ≤ n → ((Finset.range (n + 1)).prod fun p => p ^ (n.choose k).factorization p) = n.choose k","name":"Nat.prod_pow_factorization_choose","isProp":true,"docString":" For any natural numbers $n$ and $k$ with $k \\leq n$, the product of each prime $p$ raised to the power of its exponent in the prime factorization of binomial coefficient $n \\choose k$ equals $n \\choose k$.","distance":0.256480297536699819449523829462123103439807891845703125}],["This theorem states that for all natural numbers `n`, the product of `n` and `n - 1` is an even number. In mathematical terms, this theorem can be written as: \"∀ n ∈ ℕ, n*(n - 1) is even.\" Here, a number is considered even if it can be expressed as twice another number, in this case, n*(n - 1) = 2*r for some `r`.",{"type":"∀ (n : ℕ), Even (n * (n - 1))","name":"Nat.even_mul_self_pred","isProp":true,"docString":"This theorem states that for all natural numbers `n`, the product of `n` and `n - 1` is an even number. In mathematical terms, this theorem can be written as: \"∀ n ∈ ℕ, n*(n - 1) is even.\" Here, a number is considered even if it can be expressed as twice another number, in this case, n*(n - 1) = 2*r for some `r`.","distance":0.2305264102433525474911135688671492971479892730712890625}],["For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ",{"type":"∀ {R : Type u_4} [inst : NormedRing R] (k : ℕ) {r : ℝ}, 1 < r → (fun n => ↑n ^ k) =o[Filter.atTop] fun n => r ^ n","name":"isLittleO_pow_const_const_pow_of_one_lt","isProp":true,"docString":"For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ","distance":0.2687316254716749508446582694887183606624603271484375}],["Raising to the power `(n + 1 : ℕ)` behaves as expected. ",{"type":"∀ {M : Type u} [self : LeftCancelMonoid M] (n : ℕ) (x : M),\n  LeftCancelMonoid.npow (n + 1) x = x * LeftCancelMonoid.npow n x","name":"LeftCancelMonoid.npow_succ","isProp":true,"docString":"Raising to the power `(n + 1 : ℕ)` behaves as expected. ","distance":0.282468736443836132554707774033886380493640899658203125}],["The constant function with value `n : ℤ`. ",{"type":"{α : Type u_1} → ℤ → Poly α","name":"Poly.const","isProp":false,"docString":"The constant function with value `n : ℤ`. ","distance":0.283001102288147177166166557071846909821033477783203125}],["An equivalent definition for prime powers: `n` is a prime power iff there is a prime `p` and a\nnatural `k` such that `n` can be written as `p^(k+1)`. ",{"type":"∀ {R : Type u_1} [inst : CommMonoidWithZero R] (n : R), IsPrimePow n ↔ ∃ p k, Prime p ∧ p ^ (k + 1) = n","name":"isPrimePow_iff_pow_succ","isProp":true,"docString":"An equivalent definition for prime powers: `n` is a prime power iff there is a prime `p` and a\nnatural `k` such that `n` can be written as `p^(k+1)`. ","distance":0.284360705834917626422253533746697939932346343994140625}]]