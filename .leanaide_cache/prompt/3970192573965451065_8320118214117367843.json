[["If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","distance":0.66569261334937313012716231241938658058643341064453125}],[" A natural number `n` is equivalent to being odd, as defined in Lean 4, if and only if `n` modulo 2 equals 1, which is equivalent to `n` being expressible as `2*k + 1` for some natural number `k`.",{"type":"∀ {n : ℕ}, Odd n ↔ n % 2 = 1","name":"Nat.odd_iff","isProp":true,"docString":" A natural number `n` is equivalent to being odd, as defined in Lean 4, if and only if `n` modulo 2 equals 1, which is equivalent to `n` being expressible as `2*k + 1` for some natural number `k`.","distance":0.59827870027501262040203755532274954020977020263671875}],["This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","distance":0.66592244337692552136331869405694305896759033203125}],[" For any natural number `n` and `k`, the prime factorization of `n` raised to the power of `k` is `k` times the prime factorization of `n`. Equivalently, the power of each prime `p` in the prime factorization of `n^k` is `k` times its power in the prime factorization of `n`.",{"value":null,"type":"∀ (n k : ℕ), (n ^ k).factorization = k • n.factorization","statement":"theorem Nat.factorization_pow : ∀ (n k : ℕ), (n ^ k).factorization = k • n.factorization := by sorry","name":"Nat.factorization_pow","isProp":true,"docString":"For any `p`, the power of `p` in `n^k` is `k` times the power in `n` ","description":"This theorem states that for any natural numbers `n` and `k`, the prime factorization of `n` raised to the power of `k` is the same as `k` times the prime factorization of `n`. In other words, the multiplicity of each prime factor `p` in `n^k` is `k` times the multiplicity of `p` in `n`. This is equivalent to the mathematical statement that for any prime `p`, the power of `p` in the prime factorization of `n^k` is `k` times the power of `p` in the prime factorization of `n`.","concise-description":" For any natural number `n` and `k`, the prime factorization of `n` raised to the power of `k` is `k` times the prime factorization of `n`. Equivalently, the power of each prime `p` in the prime factorization of `n^k` is `k` times its power in the prime factorization of `n`."}],["Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ",{"type":"(k : ℕ) → { n // n ∉ Multiset.range k } ≃ ℕ","name":"notMemRangeEquiv","isProp":false,"docString":"Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ","distance":0.68684214244686214723145667448989115655422210693359375}],[" For all natural numbers `k` and `n`, if `k > 0` then `n < n + k`.",{"type":"∀ {k n : ℕ}, 0 < k → n < n + k","name":"Nat.lt_add_of_pos_right","isProp":true,"docString":" For all natural numbers `k` and `n`, if `k > 0` then `n < n + k`.","distance":0.60881500547194822292595972612616606056690216064453125}],["This theorem states that for all natural numbers `n` and `k`, `n` is less than or equal to `n + k`. In mathematical terms, this theorem confirms that adding any natural number to another natural number results in a number that is either greater than or equal to the original number. It's an important foundational aspect of number theory and arithmetic.",{"type":"∀ (n k : ℕ), n ≤ n + k","name":"Nat.le_add_right","isProp":true,"docString":"This theorem states that for all natural numbers `n` and `k`, `n` is less than or equal to `n + k`. In mathematical terms, this theorem confirms that adding any natural number to another natural number results in a number that is either greater than or equal to the original number. It's an important foundational aspect of number theory and arithmetic.","distance":0.7161132596318113829880758203216828405857086181640625}],[" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)",{"value":null,"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","statement":"theorem PNat.exists_eq_succ_of_ne_one : ∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1 := by sorry","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","description":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","concise-description":" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)"}],["For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ",{"type":"∀ {R : Type u_2} [inst : NormedRing R] (k : ℕ) {r : ℝ}, 1 < r → (fun n => ↑n ^ k) =o[Filter.atTop] fun n => r ^ n","name":"isLittleO_pow_const_const_pow_of_one_lt","isProp":true,"docString":"For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ","distance":0.72161567952294214389752369243069551885128021240234375}],[" For all natural numbers `n` and `k`, `n ≤ n + k`.",{"type":"∀ (n k : ℕ), n ≤ n + k","name":"Nat.le_add_right","isProp":true,"docString":" For all natural numbers `n` and `k`, `n ≤ n + k`.","distance":0.617239814235658545982232681126333773136138916015625}],["This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.",{"type":"∀ {n : ℕ}, n ≠ 0 → ∃ k, n = k.succ","name":"Nat.exists_eq_succ_of_ne_zero","isProp":true,"docString":"This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.","distance":0.71932634819687668592536056166864000260829925537109375}],["`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ",{"type":"{n : ℕ} → Fin2 n → (k : ℕ) → Fin2 (n + k)","name":"Fin2.add","isProp":false,"docString":"`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ","distance":0.7473808332128009102035548494313843548297882080078125}],[" For all natural numbers `k` and `n`, if `k > 0` then `n < k + n`.",{"type":"∀ {k n : ℕ}, 0 < k → n < k + n","name":"Nat.lt_add_of_pos_left","isProp":true,"docString":" For all natural numbers `k` and `n`, if `k > 0` then `n < k + n`.","distance":0.618283816505915684302863155608065426349639892578125}],["This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.",{"type":"∀ {k n : ℕ}, 0 < k → n < n + k","name":"Nat.lt_add_of_pos_right","isProp":true,"docString":"This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.","distance":0.7714703607829107578908178766141645610332489013671875}],["`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ",{"type":"{R : Type u_1} → [inst : CommMonoidWithZero R] → R → Prop","name":"IsPrimePow","isProp":false,"docString":"`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ","distance":0.79033384710464726907730437233112752437591552734375}],["If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\nthat are equal mod `k`. ",{"type":"∀ {s : Set ℕ}, s.Infinite → ∀ {k : ℕ}, 0 < k → ∃ m ∈ s, ∃ n ∈ s, m < n ∧ m ≡ n [MOD k]","name":"Nat.exists_lt_modEq_of_infinite","isProp":true,"docString":"If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\nthat are equal mod `k`. ","distance":0.79739397214920548773164910016930662095546722412109375}],["The integers modulo `n : ℕ`. ",{"type":"ℕ → Type","name":"ZMod","isProp":false,"docString":"The integers modulo `n : ℕ`. ","distance":0.80474871936698677554744563167332671582698822021484375}],["There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ",{"type":"∀ (N n : ℕ), (Finset.filter (fun k => k ≠ 0 ∧ n ∣ k) (Finset.range N.succ)).card = N / n","name":"Nat.card_multiples'","isProp":true,"docString":"There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ","distance":0.80757767841319505475183859743992798030376434326171875}]]