[["Any number m is less than (b+2)^(number of digits in the base b + 2 representation of m) ",{"type":"∀ {b m : ℕ}, m < (b + 2) ^ List.length (Nat.digits (b + 2) m)","name":"Nat.lt_base_pow_length_digits'","isProp":true,"docString":"Any number m is less than (b+2)^(number of digits in the base b + 2 representation of m) ","distance":0.2966324231857717652616202030912972986698150634765625}],[" For any nonnegative integer `n` and `k`, the `k`-th coefficient of the Hermite polynomial, indexed by `(2 * n + k)`, is given by the product of `(-1)^n`, the double factorial `(2 * n - 1)!`, and the binomial coefficient `binomial 2 * n k`.",{"type":"∀ (n k : ℕ),\n  (Polynomial.hermite (2 * n + k)).coeff k = (-1) ^ n * ↑(2 * n - 1).doubleFactorial * ↑((2 * n + k).choose k)","name":"Polynomial.coeff_hermite_explicit","isProp":true,"docString":" For any nonnegative integer `n` and `k`, the `k`-th coefficient of the Hermite polynomial, indexed by `(2 * n + k)`, is given by the product of `(-1)^n`, the double factorial `(2 * n - 1)!`, and the binomial coefficient `binomial 2 * n k`.","distance":0.297013163386326051185193364290171302855014801025390625}],["The theorem `Polynomial.coeff_hermite_explicit` states that for any nonnegative integer values of `n` and `k`, the `k`-th coefficient of the Hermite polynomial (which is defined by the probabilists' definition), indexed by `(2 * n + k)`, is given by the product of the (-1) raised to the power `n`, the double factorial of `(2 * n - 1)`, and the binomial coefficient of `(2 * n + k)` choose `k`. Essentially, when the Hermite polynomial's index is an odd number, this theorem describes every nonzero coefficient of the polynomial.",{"type":"∀ (n k : ℕ),\n  (Polynomial.hermite (2 * n + k)).coeff k = (-1) ^ n * ↑(2 * n - 1).doubleFactorial * ↑((2 * n + k).choose k)","name":"Polynomial.coeff_hermite_explicit","isProp":true,"docString":"The theorem `Polynomial.coeff_hermite_explicit` states that for any nonnegative integer values of `n` and `k`, the `k`-th coefficient of the Hermite polynomial (which is defined by the probabilists' definition), indexed by `(2 * n + k)`, is given by the product of the (-1) raised to the power `n`, the double factorial of `(2 * n - 1)`, and the binomial coefficient of `(2 * n + k)` choose `k`. Essentially, when the Hermite polynomial's index is an odd number, this theorem describes every nonzero coefficient of the polynomial.","distance":0.2909492737937273698634044194477610290050506591796875}],["A reformulation of the expansion of (1 + y)^d:\n$$(d + 1) (1 + y)^d - (d + 1)y^d = \\sum_{i = 0}^d {d + 1 \\choose i} \\cdot i \\cdot y^{i - 1}.$$\n",{"type":"∀ {S : Type v} [inst : CommRing S] (d : ℕ) (y : S),\n  Polynomial.eval (1 + y) ((Polynomial.monomial d) (↑d + 1)) - Polynomial.eval y ((Polynomial.monomial d) (↑d + 1)) =\n    Finset.sum (Finset.range (d + 1)) fun x_1 => ↑(Nat.choose (d + 1) x_1) * (↑x_1 * y ^ (x_1 - 1))","name":"Polynomial.eval_monomial_one_add_sub","isProp":true,"docString":"A reformulation of the expansion of (1 + y)^d:\n$$(d + 1) (1 + y)^d - (d + 1)y^d = \\sum_{i = 0}^d {d + 1 \\choose i} \\cdot i \\cdot y^{i - 1}.$$\n","distance":0.29991910733495663610170822721556760370731353759765625}],[" For any real number `m > 1`, the sum of the first `k+1` terms and the remaining terms of the infinite series $\\sum\\_{i=0}^\\infty \\frac{1}{m^{i!}}$ are equal: $\\sum\\_{i=0}^k \\frac{1}{m^{i!}} + \\sum\\_{i=k+1}^\\infty \\frac{1}{m^{i!}} = \\sum\\_{i=0}^\\infty \\frac{1}{m^{i!}}$.",{"type":"∀ {m : ℝ}, 1 < m → ∀ (k : ℕ), LiouvilleNumber.partialSum m k + LiouvilleNumber.remainder m k = liouvilleNumber m","name":"LiouvilleNumber.partialSum_add_remainder","isProp":true,"docString":" For any real number `m > 1`, the sum of the first `k+1` terms and the remaining terms of the infinite series $\\sum\\_{i=0}^\\infty \\frac{1}{m^{i!}}$ are equal: $\\sum\\_{i=0}^k \\frac{1}{m^{i!}} + \\sum\\_{i=k+1}^\\infty \\frac{1}{m^{i!}} = \\sum\\_{i=0}^\\infty \\frac{1}{m^{i!}}$.","distance":0.304359191279778340533113123456132598221302032470703125}],["This theorem expresses Vandermonde's identity in combinatorial terms. For any non-negative integers `m`, `n`, and `k`, the number of ways to choose `k` items from a group of `m + n` items is equal to the sum, for all integer pairs `(i, j)` in the set of antidiagonals of `k`, of the product of the number of ways to choose `i` items from `m` and `j` items from `n`. This sums over all possible ways of splitting `k` into two parts `i` and `j` such that `i + j = k`.",{"type":"∀ (m n k : ℕ), (m + n).choose k = (Finset.antidiagonal k).sum fun ij => m.choose ij.1 * n.choose ij.2","name":"Nat.add_choose_eq","isProp":true,"docString":"This theorem expresses Vandermonde's identity in combinatorial terms. For any non-negative integers `m`, `n`, and `k`, the number of ways to choose `k` items from a group of `m + n` items is equal to the sum, for all integer pairs `(i, j)` in the set of antidiagonals of `k`, of the product of the number of ways to choose `i` items from `m` and `j` items from `n`. This sums over all possible ways of splitting `k` into two parts `i` and `j` such that `i + j = k`.","distance":0.2921560858280158878841348268906585872173309326171875}],["The sum of the `k` initial terms of the Liouville number to base `m` is a ratio of natural\nnumbers where the denominator is `m ^ k!`. ",{"type":"∀ {m : ℕ}, 0 < m → ∀ (k : ℕ), ∃ p, LiouvilleNumber.partialSum (↑m) k = ↑p / ↑(m ^ Nat.factorial k)","name":"LiouvilleNumber.partialSum_eq_rat","isProp":true,"docString":"The sum of the `k` initial terms of the Liouville number to base `m` is a ratio of natural\nnumbers where the denominator is `m ^ k!`. ","distance":0.3075338103825100422028526736539788544178009033203125}],["The power basis `1, x, ..., x ^ (d - 1)` for `K⟮x⟯`,\nwhere `d` is the degree of the minimal polynomial of `x`. ",{"type":"{K : Type u} →\n  [inst : Field K] →\n    {L : Type u_3} → [inst_1 : Field L] → [inst_2 : Algebra K L] → {x : L} → IsIntegral K x → PowerBasis K ↥K⟮x⟯","name":"IntermediateField.adjoin.powerBasis","isProp":false,"docString":"The power basis `1, x, ..., x ^ (d - 1)` for `K⟮x⟯`,\nwhere `d` is the degree of the minimal polynomial of `x`. ","distance":0.326039383552230777052471921706455759704113006591796875}],["We can express `qrSign m n` as a power of `-1` when `m` and `n` are odd. ",{"type":"∀ {m n : ℕ}, Odd m → Odd n → qrSign m n = (-1) ^ (m / 2 * (n / 2))","name":"qrSign.neg_one_pow","isProp":true,"docString":"We can express `qrSign m n` as a power of `-1` when `m` and `n` are odd. ","distance":0.327476333932021079764496107600280083715915679931640625}],["In the general non-commutative case, the power operator is\n\n$$\\begin{align}\n(r + m)^n &= r^n + r^{n-1}m + r^{n-2}mr + \\cdots + rmr^{n-2} + mr^{n-1} \\\\\n          & =r^n + \\sum_{i = 0}^{n - 1} r^{(n - 1) - i} m r^{i}\n\\end{align}$$\n\nIn the commutative case this becomes the simpler $(r + m)^n = r^n + nr^{n-1}m$.\n",{"type":"{R : Type u} →\n  {M : Type v} →\n    [inst : Monoid R] →\n      [inst_1 : AddMonoid M] →\n        [inst_2 : DistribMulAction R M] → [inst : DistribMulAction Rᵐᵒᵖ M] → Pow (TrivSqZeroExt R M) ℕ","name":"TrivSqZeroExt.instPowTrivSqZeroExtNat","isProp":false,"docString":"In the general non-commutative case, the power operator is\n\n$$\\begin{align}\n(r + m)^n &= r^n + r^{n-1}m + r^{n-2}mr + \\cdots + rmr^{n-2} + mr^{n-1} \\\\\n          & =r^n + \\sum_{i = 0}^{n - 1} r^{(n - 1) - i} m r^{i}\n\\end{align}$$\n\nIn the commutative case this becomes the simpler $(r + m)^n = r^n + nr^{n-1}m$.\n","distance":0.327520211275333483769145459518767893314361572265625}],["Explicit formula for `ζ (2 * k)`, for `k ∈ ℕ` with `k ≠ 0`: we have\n`ζ (2 * k) = (-1) ^ (k + 1) * 2 ^ (2 * k - 1) * π ^ (2 * k) * bernoulli (2 * k) / (2 * k)!`.\nCompare `hasSum_zeta_nat` for a version formulated explicitly as a sum, and\n`riemannZeta_neg_nat_eq_bernoulli` for values at negative integers (equivalent to the above via\nthe functional equation). ",{"type":"∀ {k : ℕ},\n  k ≠ 0 →\n    riemannZeta (2 * ↑k) =\n      (-1) ^ (k + 1) * 2 ^ (2 * k - 1) * ↑Real.pi ^ (2 * k) * ↑(bernoulli (2 * k)) / ↑(Nat.factorial (2 * k))","name":"riemannZeta_two_mul_nat","isProp":true,"docString":"Explicit formula for `ζ (2 * k)`, for `k ∈ ℕ` with `k ≠ 0`: we have\n`ζ (2 * k) = (-1) ^ (k + 1) * 2 ^ (2 * k - 1) * π ^ (2 * k) * bernoulli (2 * k) / (2 * k)!`.\nCompare `hasSum_zeta_nat` for a version formulated explicitly as a sum, and\n`riemannZeta_neg_nat_eq_bernoulli` for values at negative integers (equivalent to the above via\nthe functional equation). ","distance":0.32904810689291530412248221182380802929401397705078125}],["Shows that\n$\\sum_{k = 0}^{n - 1} (e^{X})^k = \\sum_{p = 0}^{\\infty} \\sum_{k = 0}^{n - 1} \\frac{k^p}{p!}X^p$. ",{"type":"∀ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ℚ A] (n : ℕ),\n  (Finset.sum (Finset.range n) fun k => PowerSeries.exp A ^ k) =\n    PowerSeries.mk fun p => Finset.sum (Finset.range n) fun k => ↑k ^ p * (algebraMap ℚ A) (↑(Nat.factorial p))⁻¹","name":"PowerSeries.exp_pow_sum","isProp":true,"docString":"Shows that\n$\\sum_{k = 0}^{n - 1} (e^{X})^k = \\sum_{p = 0}^{\\infty} \\sum_{k = 0}^{n - 1} \\frac{k^p}{p!}X^p$. ","distance":0.330023713170681187722976801524055190384387969970703125}],["The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. ",{"type":"∀ (n : ℕ), (∑' (i : ℕ), if n ≤ i then 2⁻¹ ^ i else 0) = 2 * 2⁻¹ ^ n","name":"tsum_geometric_inv_two_ge","isProp":true,"docString":"The sum of `2⁻¹ ^ i` for `n ≤ i` equals `2 * 2⁻¹ ^ n`. ","distance":0.332488495352500523782879326972761191427707672119140625}],["Any number m is less than b^(number of digits in the base b representation of m) ",{"type":"∀ {b m : ℕ}, 1 < b → m < b ^ List.length (Nat.digits b m)","name":"Nat.lt_base_pow_length_digits","isProp":true,"docString":"Any number m is less than b^(number of digits in the base b representation of m) ","distance":0.333234630889516492135982161926222033798694610595703125}],["$x^n-y^n = (x-y) \\sum x^ky^{n-1-k}$ reformulated without `-` signs. ",{"type":"∀ {α : Type u} [inst : CommSemiring α] (x y : α) (n : ℕ),\n  (Finset.sum (Finset.range n) fun i => (x + y) ^ i * y ^ (n - 1 - i)) * x + y ^ n = (x + y) ^ n","name":"geom_sum₂_mul_add","isProp":true,"docString":"$x^n-y^n = (x-y) \\sum x^ky^{n-1-k}$ reformulated without `-` signs. ","distance":0.336950926169687747790959519988973625004291534423828125}],["Let `(g₀, g₁, ..., gₙ)` be a tuple of elements in `Gⁿ⁺¹`.\nThen if `k < j`, this says `-(g₀ + g₁ + ... + gₖ₋₁) + (g₀ + g₁ + ... + gₖ) = gₖ`.\nIf `k = j`, it says `-(g₀ + g₁ + ... + gₖ₋₁) + (g₀ + g₁ + ... + gₖ₊₁) = gₖ + gₖ₊₁`.\nIf `k > j`, it says `-(g₀ + g₁ + ... + gₖ) + (g₀ + g₁ + ... + gₖ₊₁) = gₖ₊₁.`\nUseful for defining group cohomology.",{"type":"∀ {n : ℕ} {G : Type u_3} [inst : AddGroup G] (g : Fin (n + 1) → G) (j : Fin (n + 1)) (k : Fin n),\n  -Fin.partialSum g (Fin.succAbove (Fin.succ j) (Fin.castSucc k)) + Fin.partialSum g (Fin.succ (Fin.succAbove j k)) =\n    Fin.contractNth j (fun x x_1 => x + x_1) g k","name":"Fin.neg_partialSum_add_eq_contractNth","isProp":true,"docString":"Let `(g₀, g₁, ..., gₙ)` be a tuple of elements in `Gⁿ⁺¹`.\nThen if `k < j`, this says `-(g₀ + g₁ + ... + gₖ₋₁) + (g₀ + g₁ + ... + gₖ) = gₖ`.\nIf `k = j`, it says `-(g₀ + g₁ + ... + gₖ₋₁) + (g₀ + g₁ + ... + gₖ₊₁) = gₖ + gₖ₊₁`.\nIf `k > j`, it says `-(g₀ + g₁ + ... + gₖ) + (g₀ + g₁ + ... + gₖ₊₁) = gₖ₊₁.`\nUseful for defining group cohomology.","distance":0.337571148696672818090291912085376679897308349609375}],["For any `p`, the power of `p` in `n^k` is `k` times the power in `n` ",{"type":"∀ (n k : ℕ), Nat.factorization (n ^ k) = k • Nat.factorization n","name":"Nat.factorization_pow","isProp":true,"docString":"For any `p`, the power of `p` in `n^k` is `k` times the power in `n` ","distance":0.337598728107073420279249376108055002987384796142578125}],["The second element of a product $\\prod_{i=0}^n (r_i + m_i)$ is a sum of terms of the form\n$r_0\\cdots r_{i-1}m_ir_{i+1}\\cdots r_n$. ",{"type":"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\n  [inst_3 : Module Rᵐᵒᵖ M] [inst_4 : SMulCommClass R Rᵐᵒᵖ M] (l : List (TrivSqZeroExt R M)),\n  TrivSqZeroExt.snd (List.prod l) =\n    List.sum\n      (List.map\n        (fun x =>\n          List.prod (List.take x.1 (List.map TrivSqZeroExt.fst l)) •\n            MulOpposite.op (List.prod (List.drop (Nat.succ x.1) (List.map TrivSqZeroExt.fst l))) •\n              TrivSqZeroExt.snd x.2)\n        (List.enum l))","name":"TrivSqZeroExt.snd_list_prod","isProp":true,"docString":"The second element of a product $\\prod_{i=0}^n (r_i + m_i)$ is a sum of terms of the form\n$r_0\\cdots r_{i-1}m_ir_{i+1}\\cdots r_n$. ","distance":0.339272992415017238254648646034183911979198455810546875}],["The vanishing polynomial on a multiplicative subgroup is of the form X ^ n - 1. ",{"type":"∀ {R : Type u_1} [inst : CommRing R] [inst_1 : IsDomain R] (G : Subgroup Rˣ) [inst_2 : Fintype ↥G],\n  Lagrange.nodal (Set.toFinset ↑G) Units.val = Polynomial.X ^ Fintype.card ↥G - 1","name":"Lagrange.nodal_subgroup_eq_X_pow_card_sub_one","isProp":true,"docString":"The vanishing polynomial on a multiplicative subgroup is of the form X ^ n - 1. ","distance":0.339442939051058323318699194715009070932865142822265625}],["If `1 < k`, then `ζ ^ k.pred = -(∑ i in range k.pred, ζ ^ i)`. ",{"type":"∀ {R : Type u_4} {k : ℕ} [inst : CommRing R] [inst_1 : IsDomain R] {ζ : R},\n  IsPrimitiveRoot ζ k → 1 < k → ζ ^ Nat.pred k = -Finset.sum (Finset.range (Nat.pred k)) fun i => ζ ^ i","name":"IsPrimitiveRoot.pow_sub_one_eq","isProp":true,"docString":"If `1 < k`, then `ζ ^ k.pred = -(∑ i in range k.pred, ζ ^ i)`. ","distance":0.340470562539789078915219988630269654095172882080078125}],["For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ",{"type":"∀ {R : Type u_4} [inst : NormedRing R] (k : ℕ) {r : ℝ}, 1 < r → (fun n => ↑n ^ k) =o[Filter.atTop] fun n => r ^ n","name":"isLittleO_pow_const_const_pow_of_one_lt","isProp":true,"docString":"For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ","distance":0.340780144733674461576811154372990131378173828125}],["For `d ∣ n`, the totient of `n/d` equals the number of values `k < n` such that `gcd n k = d` ",{"type":"∀ {n d : ℕ}, d ∣ n → Nat.totient (n / d) = (Finset.filter (fun k => Nat.gcd n k = d) (Finset.range n)).card","name":"Nat.totient_div_of_dvd","isProp":true,"docString":"For `d ∣ n`, the totient of `n/d` equals the number of values `k < n` such that `gcd n k = d` ","distance":0.34119651326054434292700534570030868053436279296875}],["The digits in the base b+2 expansion of n are all less than b+2 ",{"type":"∀ {b m d : ℕ}, d ∈ Nat.digits (b + 2) m → d < b + 2","name":"Nat.digits_lt_base'","isProp":true,"docString":"The digits in the base b+2 expansion of n are all less than b+2 ","distance":0.342213909190388021475115465364069677889347076416015625}],["Expressing the product of two polynomials as a double sum. ",{"type":"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\n  p * q =\n    Finset.sum (Polynomial.support p) fun i =>\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)","name":"Polynomial.mul_eq_sum_sum","isProp":true,"docString":"Expressing the product of two polynomials as a double sum. ","distance":0.34306441985498670188547976067638956010341644287109375}]]