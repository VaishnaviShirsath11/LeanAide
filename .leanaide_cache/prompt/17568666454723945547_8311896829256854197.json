[["The sum of the values of an odd function is 0. ",{"type":"∀ {α : Type u_3} {β : Type u_4} [inst : AddCommGroup β] [inst_1 : NoZeroSMulDivisors ℕ β] [inst_2 : Fintype α]\n  [inst_3 : InvolutiveNeg α] {f : α → β}, Function.Odd f → ∑ a : α, f a = 0","name":"Function.Odd.sum_eq_zero","isProp":true,"docString":"The sum of the values of an odd function is 0. ","distance":0.44888524484451985951949382069869898259639739990234375}],[" The sum of two natural numbers is even if and only if both numbers are even or both are odd.",{"type":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)","name":"Nat.even_add","isProp":true,"docString":" The sum of two natural numbers is even if and only if both numbers are even or both are odd.","distance":0.353371422453793826434775837697088718414306640625}],["This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.",{"type":"∀ {m n : ℕ}, Even (m + n) ↔ (Even m ↔ Even n)","name":"Nat.even_add","isProp":true,"docString":"This theorem states that for all natural numbers `m` and `n`, the sum `m + n` is even if and only if `m` and `n` are both even or both odd. In other words, the parity of the sum of two natural numbers is the same as the parity of the individual numbers. Here, `Even` is a property of a number that is defined to be true if the number can be expressed as the sum of two equal numbers.","distance":0.61107829140206337825702576083131134510040283203125}],["If `a` is even, then `n` is odd iff `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n)","name":"Odd.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is odd iff `n % a` is odd. ","distance":0.72449658019011831111555466122808866202831268310546875}],[" The sum of two integers is even if and only if both integers are even.",{"type":"∀ {n : ℤ}, Even n = (n % 2 = 0)","name":"Mathlib.Data.Int.Parity._auxLemma.21","isProp":true,"docString":" The sum of two integers is even if and only if both integers are even.","distance":0.38787860847449795453911747245001606643199920654296875}],["The theorem `Odd.add_odd` states that for any type `α` that is a semiring, given two elements `m` and `n` of that semiring, if `m` and `n` are both odd, then their sum `m + n` is even. In other words, the sum of two odd numbers is always even in any semiring.",{"type":"∀ {α : Type u_2} [inst : Semiring α] {a b : α}, Odd a → Odd b → Even (a + b)","name":"Odd.add_odd","isProp":true,"docString":"The theorem `Odd.add_odd` states that for any type `α` that is a semiring, given two elements `m` and `n` of that semiring, if `m` and `n` are both odd, then their sum `m + n` is even. In other words, the sum of two odd numbers is always even in any semiring.","distance":0.65752337599992427552564322468242608010768890380859375}],["The convolution of two even functions is also even. ",{"type":"∀ {\u0000\u0000 : Type u\u0000\u0000} {G : Type uG} {E : Type uE} {E' : Type uE'} {F : Type uF} [inst : NormedAddCommGroup E]\n  [inst_1 : NormedAddCommGroup E'] [inst_2 : NormedAddCommGroup F] {f : G → E} {g : G → E'} {x : G}\n  [inst_3 : NontriviallyNormedField \u0000\u0000] [inst_4 : NormedSpace \u0000\u0000 E] [inst_5 : NormedSpace \u0000\u0000 E'] [inst_6 : NormedSpace \u0000\u0000 F]\n  (L : E →L[\u0000\u0000] E' →L[\u0000\u0000] F) [inst_7 : MeasurableSpace G] {μ : MeasureTheory.Measure G} [inst_8 : NormedSpace ℝ F]\n  [inst_9 : AddCommGroup G] [inst_10 : μ.IsAddLeftInvariant] [inst_11 : μ.IsNegInvariant] [inst_12 : MeasurableNeg G]\n  [inst_13 : MeasurableAdd G],\n  (∀ᵐ (x : G) ∂μ, f (-x) = f x) →\n    (∀ᵐ (x : G) ∂μ, g (-x) = g x) → MeasureTheory.convolution f g L μ (-x) = MeasureTheory.convolution f g L μ x","name":"MeasureTheory.convolution_neg_of_neg_eq","isProp":true,"docString":"The convolution of two even functions is also even. ","distance":0.7274379351441020435942164112930186092853546142578125}],["If `n` is odd and `a` is even, then `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Odd n → Even a → Odd (n % a)","name":"Odd.mod_even","isProp":true,"docString":"If `n` is odd and `a` is even, then `n % a` is odd. ","distance":0.72772939632005895216337876263423822820186614990234375}],["If `n` is even and `a` is even, then `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even n → Even a → Even (n % a)","name":"Even.mod_even","isProp":true,"docString":"If `n` is even and `a` is even, then `n % a` is even. ","distance":0.7472574785223990989635467485641129314899444580078125}],["Any constant function is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] (b : β), Function.Even fun x => b","name":"Function.Even.const","isProp":true,"docString":"Any constant function is even. ","distance":0.77089458142953881658598902504309080541133880615234375}],["The zero function is odd. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] [inst_1 : NegZeroClass β], Function.Odd fun x => 0","name":"Function.Odd.zero","isProp":true,"docString":"The zero function is odd. ","distance":0.78339071928294978786055935415788553655147552490234375}],["In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ",{"type":"∀ {n : ℕ} [inst : NeZero n] {k : Fin n}, Odd k ↔ Odd n ∨ Odd ↑k","name":"Fin.odd_iff","isProp":true,"docString":"In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ","distance":0.78342772239457703076226380289881490170955657958984375}],["If `f` is even and `g` is odd, then `f ∘ g` is even. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] {γ : Type u_3} [inst_1 : Neg β] {f : β → γ},\n  Function.Even f → ∀ {g : α → β}, Function.Odd g → Function.Even (f ∘ g)","name":"Function.Even.comp_odd","isProp":true,"docString":"If `f` is even and `g` is odd, then `f ∘ g` is even. ","distance":0.79313716282878055086058566303108818829059600830078125}],["If `a` is even, then `n` is even iff `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n)","name":"Even.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is even iff `n % a` is even. ","distance":0.79373554014953373592078378351288847625255584716796875}],["In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ",{"type":"∀ {n : ℕ} {k : Fin n}, Even k ↔ Odd n ∨ Even ↑k","name":"Fin.even_iff","isProp":true,"docString":"In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ","distance":0.79804274722356982607607278623618185520172119140625}],["The L-function of an odd function vanishes at negative odd integers. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {Φ : ZMod N → ℂ}, Function.Odd Φ → ∀ (n : ℕ), ZMod.LFunction Φ (-(2 * ↑n) - 1) = 0","name":"ZMod.LFunction_neg_two_mul_nat_sub_one","isProp":true,"docString":"The L-function of an odd function vanishes at negative odd integers. ","distance":0.83343211650550308444707070520962588489055633544921875}],["A natural number is odd iff it has residue `1` or `3` mod `4`",{"type":"∀ {n : ℕ}, n % 2 = 1 ↔ n % 4 = 1 ∨ n % 4 = 3","name":"Nat.odd_mod_four_iff","isProp":true,"docString":"A natural number is odd iff it has residue `1` or `3` mod `4`","distance":0.83773297233982513265715397210442461073398590087890625}],["Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ",{"type":"{P : ℕ → Sort u_1} →\n  ((n : ℕ) → ((k : ℕ) → k < 2 * n → P k) → P (2 * n)) →\n    ((n : ℕ) → ((k : ℕ) → k < 2 * n + 1 → P k) → P (2 * n + 1)) → (n : ℕ) → P n","name":"Nat.evenOddStrongRec","isProp":false,"docString":"Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ","distance":0.84580635046631569284869556213379837572574615478515625}],["The even or odd submodule, defined as the supremum of the even or odd powers of\n`(ι Q).range`. `evenOdd 0` is the even submodule, and `evenOdd 1` is the odd submodule. ",{"type":"{R : Type u_1} →\n  {M : Type u_2} →\n    [inst : CommRing R] →\n      [inst_1 : AddCommGroup M] →\n        [inst_2 : Module R M] → (Q : QuadraticForm R M) → ZMod 2 → Submodule R (CliffordAlgebra Q)","name":"CliffordAlgebra.evenOdd","isProp":false,"docString":"The even or odd submodule, defined as the supremum of the even or odd powers of\n`(ι Q).range`. `evenOdd 0` is the even submodule, and `evenOdd 1` is the odd submodule. ","distance":0.85243749205559116166597277697292156517505645751953125}],["If `f` and `g` are odd, then `f ∘ g` is odd. ",{"type":"∀ {α : Type u_1} {β : Type u_2} [inst : Neg α] {γ : Type u_3} [inst_1 : Neg β] [inst_2 : Neg γ] {f : β → γ},\n  Function.Odd f → ∀ {g : α → β}, Function.Odd g → Function.Odd (f ∘ g)","name":"Function.Odd.comp_odd","isProp":true,"docString":"If `f` and `g` are odd, then `f ∘ g` is odd. ","distance":0.87501221214961388827902055709273554384708404541015625}],["A function `f` is _odd_ if it satisfies `f (-x) = -f x` for all `x`. ",{"type":"{α : Type u_1} → {β : Type u_2} → [inst : Neg α] → [inst : Neg β] → (α → β) → Prop","name":"Function.Odd","isProp":false,"docString":"A function `f` is _odd_ if it satisfies `f (-x) = -f x` for all `x`. ","distance":0.8844482945483738145497909499681554734706878662109375}],["The L-function of an even function vanishes at negative even integers. ",{"type":"∀ {N : ℕ} [inst : NeZero N] {Φ : ZMod N → ℂ}, Function.Even Φ → ∀ (n : ℕ), ZMod.LFunction Φ (-(2 * (↑n + 1))) = 0","name":"ZMod.LFunction_neg_two_mul_nat_add_one","isProp":true,"docString":"The L-function of an even function vanishes at negative even integers. ","distance":0.8871933332295787177912416154867969453334808349609375}],["**Lifting the exponent lemma** for odd primes. ",{"type":"∀ {p : ℕ},\n  Nat.Prime p →\n    Odd p →\n      ∀ {x y : ℤ},\n        ↑p ∣ x - y →\n          ¬↑p ∣ x → ∀ (n : ℕ), emultiplicity (↑p) (x ^ n - y ^ n) = emultiplicity (↑p) (x - y) + emultiplicity p n","name":"Int.emultiplicity_pow_sub_pow","isProp":true,"docString":"**Lifting the exponent lemma** for odd primes. ","distance":0.88783842730303474954922648976207710802555084228515625}],["The sum over the values of the quadratic character is zero when the characteristic is odd. ",{"type":"∀ {F : Type u_1} [inst : Field F] [inst_1 : Fintype F] [inst_2 : DecidableEq F],\n  ringChar F ≠ 2 → ∑ a : F, (quadraticChar F) a = 0","name":"quadraticChar_sum_zero","isProp":true,"docString":"The sum over the values of the quadratic character is zero when the characteristic is odd. ","distance":0.893878423646072395314376990427263081073760986328125}]]