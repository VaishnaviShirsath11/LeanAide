[["The product of `f a + g a` over all of `s` is the sum over the powerset of `s` of the product of\n`f` over a subset `t` times the product of `g` over the complement of `t`  ",{"type":"∀ {ι : Type u_1} {α : Type u_2} [inst : CommSemiring α] [inst_1 : DecidableEq ι] (f g : ι → α) (s : Finset ι),\n  (Finset.prod s fun i => f i + g i) =\n    Finset.sum (Finset.powerset s) fun t => (Finset.prod t fun i => f i) * Finset.prod (s \\ t) fun i => g i","name":"Finset.prod_add","isProp":true,"docString":"The product of `f a + g a` over all of `s` is the sum over the powerset of `s` of the product of\n`f` over a subset `t` times the product of `g` over the complement of `t`  ","distance":0.25126711978818139225921868273871950805187225341796875}],[" For natural number $n$ and non-negative real sequence $p$, and non-negative real numbers $r$ and $a$, the sum of products of powers of $a$ and sums of powers of $r$ and products of $p$ over certain indices, is bounded above by the sum of products of powers of $r$ and sums of powers of $a$ and $p(k)$ over different indices.",{"type":"∀ (n : ℕ) (p : ℕ → ℝ),\n  (∀ (k : ℕ), 0 ≤ p k) →\n    ∀ {r a : ℝ},\n      0 ≤ r →\n        0 ≤ a →\n          ((Finset.Ico 2 (n + 1)).sum fun k =>\n              a ^ k *\n                {c | 1 < c.length}.toFinset.sum fun c => r ^ c.length * Finset.univ.prod fun j => p (c.blocksFun j)) ≤\n            (Finset.Ico 2 (n + 1)).sum fun j => r ^ j * ((Finset.Ico 1 n).sum fun k => a ^ k * p k) ^ j","name":"FormalMultilinearSeries.radius_right_inv_pos_of_radius_pos_aux1","isProp":true,"docString":" For natural number $n$ and non-negative real sequence $p$, and non-negative real numbers $r$ and $a$, the sum of products of powers of $a$ and sums of powers of $r$ and products of $p$ over certain indices, is bounded above by the sum of products of powers of $r$ and sums of powers of $a$ and $p(k)$ over different indices.","distance":0.2683968416245943178211064150673337280750274658203125}],["This theorem states that for all natural numbers `n`, `m`, and `k`, the product of `n` and the sum of `m` and `k` is equal to the sum of the product of `n` and `m` and the product of `n` and `k`. In mathematical terms, it expresses the distributive property of multiplication over addition for natural numbers: `n*(m+k) = n*m + n*k`.",{"type":"∀ (n m k : ℕ), n * (m + k) = n * m + n * k","name":"Nat.mul_add","isProp":true,"docString":"This theorem states that for all natural numbers `n`, `m`, and `k`, the product of `n` and the sum of `m` and `k` is equal to the sum of the product of `n` and `m` and the product of `n` and `k`. In mathematical terms, it expresses the distributive property of multiplication over addition for natural numbers: `n*(m+k) = n*m + n*k`.","distance":0.27494893180433666035611395273008383810520172119140625}],["The second element of a product $\\prod_{i=0}^n (r_i + m_i)$ is a sum of terms of the form\n$r_0\\cdots r_{i-1}m_ir_{i+1}\\cdots r_n$. ",{"type":"∀ {R : Type u} {M : Type v} [inst : Semiring R] [inst_1 : AddCommMonoid M] [inst_2 : Module R M]\n  [inst_3 : Module Rᵐᵒᵖ M] [inst_4 : SMulCommClass R Rᵐᵒᵖ M] (l : List (TrivSqZeroExt R M)),\n  TrivSqZeroExt.snd (List.prod l) =\n    List.sum\n      (List.map\n        (fun x =>\n          List.prod (List.take x.1 (List.map TrivSqZeroExt.fst l)) •\n            MulOpposite.op (List.prod (List.drop (Nat.succ x.1) (List.map TrivSqZeroExt.fst l))) •\n              TrivSqZeroExt.snd x.2)\n        (List.enum l))","name":"TrivSqZeroExt.snd_list_prod","isProp":true,"docString":"The second element of a product $\\prod_{i=0}^n (r_i + m_i)$ is a sum of terms of the form\n$r_0\\cdots r_{i-1}m_ir_{i+1}\\cdots r_n$. ","distance":0.25500800538837331554731235883082263171672821044921875}],[" For all natural numbers `n`, `m`, and `k`, the product of `n` with the sum of `m` and `k` is equal to the sum of the products of `n` with `m` and `k` (distributive property of multiplication over addition).",{"type":"∀ (n m k : ℕ), n * (m + k) = n * m + n * k","name":"Nat.mul_add","isProp":true,"docString":" For all natural numbers `n`, `m`, and `k`, the product of `n` with the sum of `m` and `k` is equal to the sum of the products of `n` with `m` and `k` (distributive property of multiplication over addition).","distance":0.2821258869750093989381412029615603387355804443359375}],["This theorem states that for a finite set `s` of some type `α` and an element `a` of type `α` that is not in `s`, along with a function `f` from `α` to another type `M` with a commutative monoid structure, the total product of `f(i)` for each `i` in the set obtained by inserting `a` into `s` equals the product of `f(a)` and the total product of `f(i)` for each `i` in `s`. In mathematical notation, this can be written as \\(\\prod_{i \\in s \\cup \\{a\\}} f(i) = f(a) \\prod_{i \\in s} f(i)\\), assuming that the product is defined as `1` for an empty set.",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {a : α} {s : Set α} (f : α → M),\n  a ∉ s → s.Finite → (finprod fun i => finprod fun h => f i) = f a * finprod fun i => finprod fun h => f i","name":"finprod_mem_insert","isProp":true,"docString":"This theorem states that for a finite set `s` of some type `α` and an element `a` of type `α` that is not in `s`, along with a function `f` from `α` to another type `M` with a commutative monoid structure, the total product of `f(i)` for each `i` in the set obtained by inserting `a` into `s` equals the product of `f(a)` and the total product of `f(i)` for each `i` in `s`. In mathematical notation, this can be written as \\(\\prod_{i \\in s \\cup \\{a\\}} f(i) = f(a) \\prod_{i \\in s} f(i)\\), assuming that the product is defined as `1` for an empty set.","distance":0.28547891505209566087586381399887613952159881591796875}],["Given a finite set `s`, the product of `f i * g i` over `i ∈ s` equals the product of `f i`\nover `i ∈ s` times the product of `g i` over `i ∈ s`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {f g : α → M} {s : Set α},\n  Set.Finite s →\n    (finprod fun i => finprod fun h => f i * g i) =\n      (finprod fun i => finprod fun h => f i) * finprod fun i => finprod fun h => g i","name":"finprod_mem_mul_distrib","isProp":true,"docString":"Given a finite set `s`, the product of `f i * g i` over `i ∈ s` equals the product of `f i`\nover `i ∈ s` times the product of `g i` over `i ∈ s`. ","distance":0.274637756823200351874447733280248939990997314453125}],["The `n`th power of `s : Sum` is the `n`-fold product of `s`, with `s.pow 0 = Sum.one`. ",{"type":"Linarith.Sum → ℕ → Linarith.Sum","name":"Linarith.Sum.pow","isProp":false,"docString":"The `n`th power of `s : Sum` is the `n`-fold product of `s`, with `s.pow 0 = Sum.one`. ","distance":0.2832397048680779239049343232181854546070098876953125}],["Given a finite set `s` and an element `a ∉ s`, the product of `f i` over `i ∈ insert a s` equals\n`f a` times the product of `f i` over `i ∈ s`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {a : α} {s : Set α} (f : α → M),\n  a ∉ s → Set.Finite s → (finprod fun i => finprod fun h => f i) = f a * finprod fun i => finprod fun h => f i","name":"finprod_mem_insert","isProp":true,"docString":"Given a finite set `s` and an element `a ∉ s`, the product of `f i` over `i ∈ insert a s` equals\n`f a` times the product of `f i` over `i ∈ s`. ","distance":0.287741125105239081705121861887164413928985595703125}],["Expressing the product of two polynomials as a double sum. ",{"type":"∀ {R : Type u} [inst : Semiring R] {p q : Polynomial R},\n  p * q =\n    Finset.sum (Polynomial.support p) fun i =>\n      Polynomial.sum q fun j a => (Polynomial.monomial (i + j)) (Polynomial.coeff p i * a)","name":"Polynomial.mul_eq_sum_sum","isProp":true,"docString":"Expressing the product of two polynomials as a double sum. ","distance":0.290502464771557888933983804236049763858318328857421875}],["If `t` is a finite set of pairwise disjoint finite sets, then the product of `f a`\nover `a ∈ ⋃₀ t` is the product over `s ∈ t` of the products of `f a` over `a ∈ s`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {f : α → M} {t : Set (Set α)},\n  Set.PairwiseDisjoint t id →\n    Set.Finite t →\n      (∀ x ∈ t, Set.Finite x) →\n        (finprod fun a => finprod fun h => f a) =\n          finprod fun s => finprod fun h => finprod fun a => finprod fun h => f a","name":"finprod_mem_sUnion","isProp":true,"docString":"If `t` is a finite set of pairwise disjoint finite sets, then the product of `f a`\nover `a ∈ ⋃₀ t` is the product over `s ∈ t` of the products of `f a` over `a ∈ s`. ","distance":0.291705788685591993480983319386723451316356658935546875}],["Given finite sets `s` and `t`, the product of `f i` over `i ∈ s ∪ t` times the product of\n`f i` over `i ∈ s ∩ t` equals the product of `f i` over `i ∈ s` times the product of `f i`\nover `i ∈ t`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {f : α → M} {s t : Set α},\n  Set.Finite s →\n    Set.Finite t →\n      ((finprod fun i => finprod fun h => f i) * finprod fun i => finprod fun h => f i) =\n        (finprod fun i => finprod fun h => f i) * finprod fun i => finprod fun h => f i","name":"finprod_mem_union_inter","isProp":true,"docString":"Given finite sets `s` and `t`, the product of `f i` over `i ∈ s ∪ t` times the product of\n`f i` over `i ∈ s ∩ t` equals the product of `f i` over `i ∈ s` times the product of `f i`\nover `i ∈ t`. ","distance":0.294772968883385499960780862238607369363307952880859375}],["Given two finite disjoint sets `s` and `t`, the product of `f i` over `i ∈ s ∪ t` equals the\nproduct of `f i` over `i ∈ s` times the product of `f i` over `i ∈ t`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {f : α → M} {s t : Set α},\n  Disjoint s t →\n    Set.Finite s →\n      Set.Finite t →\n        (finprod fun i => finprod fun h => f i) =\n          (finprod fun i => finprod fun h => f i) * finprod fun i => finprod fun h => f i","name":"finprod_mem_union","isProp":true,"docString":"Given two finite disjoint sets `s` and `t`, the product of `f i` over `i ∈ s ∪ t` equals the\nproduct of `f i` over `i ∈ s` times the product of `f i` over `i ∈ t`. ","distance":0.29815569386288587327982213537325151264667510986328125}],["Given a finite set `t` and a subset `s` of `t`, the product of `f i` over `i ∈ s`\ntimes the product of `f i` over `t \\ s` equals the product of `f i` over `i ∈ t`. ",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : CommMonoid M] {f : α → M} {s t : Set α},\n  s ⊆ t →\n    Set.Finite t →\n      ((finprod fun i => finprod fun h => f i) * finprod fun i => finprod fun h => f i) =\n        finprod fun i => finprod fun h => f i","name":"finprod_mem_mul_diff","isProp":true,"docString":"Given a finite set `t` and a subset `s` of `t`, the product of `f i` over `i ∈ s`\ntimes the product of `f i` over `t \\ s` equals the product of `f i` over `i ∈ t`. ","distance":0.29965356252568164929783733896329067647457122802734375}],["The multiplicity of `(a, b)` in `s ×ˢ t` is\nthe product of the multiplicity of `a` in `s` and `b` in `t`. ",{"type":"{α : Type u_1} → {β : Type v} → Multiset α → Multiset β → Multiset (α × β)","name":"Multiset.product","isProp":false,"docString":"The multiplicity of `(a, b)` in `s ×ˢ t` is\nthe product of the multiplicity of `a` in `s` and `b` in `t`. ","distance":0.2998293966882996652856263608555309474468231201171875}],["An inner product with a sum on the left. ",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {ι : Type u_4} (s : Finset ι) (f : ι → E) (x : E), ⟪Finset.sum s fun i => f i, x⟫_𝕜 = Finset.sum s fun i => ⟪f i, x⟫_𝕜","name":"sum_inner","isProp":true,"docString":"An inner product with a sum on the left. ","distance":0.29983009760802603604901150902151130139827728271484375}],["A sum over `powerset s` is equal to the double sum over sets of subsets of `s` with\n`card s = k`, for `k = 1, ..., card s`",{"type":"∀ {β : Type u} {α : Type v} [inst : AddCommMonoid β] (s : Finset α) (f : Finset α → β),\n  (Finset.sum (Finset.powerset s) fun t => f t) =\n    Finset.sum (Finset.range (s.card + 1)) fun j => Finset.sum (Finset.powersetCard j s) fun t => f t","name":"Finset.sum_powerset","isProp":true,"docString":"A sum over `powerset s` is equal to the double sum over sets of subsets of `s` with\n`card s = k`, for `k = 1, ..., card s`","distance":0.30024624518720954835515613012830726802349090576171875}],["A product over `powerset s` is equal to the double product over sets of subsets of `s` with\n`card s = k`, for `k = 1, ..., card s`. ",{"type":"∀ {β : Type u} {α : Type v} [inst : CommMonoid β] (s : Finset α) (f : Finset α → β),\n  (Finset.prod (Finset.powerset s) fun t => f t) =\n    Finset.prod (Finset.range (s.card + 1)) fun j => Finset.prod (Finset.powersetCard j s) fun t => f t","name":"Finset.prod_powerset","isProp":true,"docString":"A product over `powerset s` is equal to the double product over sets of subsets of `s` with\n`card s = k`, for `k = 1, ..., card s`. ","distance":0.30531185744076994037499162004678510129451751708984375}],["Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂`. ",{"type":"∀ {K : Type u_1} {g : GeneralizedContinuedFraction K} {n : ℕ} [inst : DivisionRing K]\n  {gp : GeneralizedContinuedFraction.Pair K} {ppredA predA : K},\n  Stream'.Seq.get? g.s (n + 1) = some gp →\n    GeneralizedContinuedFraction.numerators g n = ppredA →\n      GeneralizedContinuedFraction.numerators g (n + 1) = predA →\n        GeneralizedContinuedFraction.numerators g (n + 2) = gp.b * predA + gp.a * ppredA","name":"GeneralizedContinuedFraction.numerators_recurrence","isProp":true,"docString":"Shows that `Aₙ = bₙ * Aₙ₋₁ + aₙ * Aₙ₋₂`. ","distance":0.305488523243873710821816302996012382209300994873046875}],["An inner product with a sum on the right. ",{"type":"∀ {𝕜 : Type u_1} {E : Type u_2} [inst : IsROrC 𝕜] [inst_1 : NormedAddCommGroup E] [inst_2 : InnerProductSpace 𝕜 E]\n  {ι : Type u_4} (s : Finset ι) (f : ι → E) (x : E), ⟪x, Finset.sum s fun i => f i⟫_𝕜 = Finset.sum s fun i => ⟪x, f i⟫_𝕜","name":"inner_sum","isProp":true,"docString":"An inner product with a sum on the right. ","distance":0.3065269888127151176604456850327551364898681640625}],["If `t` is a finite set of pairwise disjoint finite sets, then the sum of `f a` over\n`a ∈ ⋃₀ t` is the sum over `s ∈ t` of the sums of `f a` over `a ∈ s`.",{"type":"∀ {α : Type u_1} {M : Type u_5} [inst : AddCommMonoid M] {f : α → M} {t : Set (Set α)},\n  Set.PairwiseDisjoint t id →\n    Set.Finite t →\n      (∀ x ∈ t, Set.Finite x) →\n        (finsum fun a => finsum fun h => f a) = finsum fun s => finsum fun h => finsum fun a => finsum fun h => f a","name":"finsum_mem_sUnion","isProp":true,"docString":"If `t` is a finite set of pairwise disjoint finite sets, then the sum of `f a` over\n`a ∈ ⋃₀ t` is the sum over `s ∈ t` of the sums of `f a` over `a ∈ s`.","distance":0.307528209669241991974786287755705416202545166015625}],["Summing `a^s.card * b^(n-s.card)` over all finite subsets `s` of a `Finset`\ngives `(a + b)^s.card`.",{"type":"∀ {ι : Type u_1} {α : Type u_2} [inst : CommSemiring α] (a b : α) (s : Finset ι),\n  (Finset.sum (Finset.powerset s) fun t => a ^ t.card * b ^ (s.card - t.card)) = (a + b) ^ s.card","name":"Finset.sum_pow_mul_eq_add_pow","isProp":true,"docString":"Summing `a^s.card * b^(n-s.card)` over all finite subsets `s` of a `Finset`\ngives `(a + b)^s.card`.","distance":0.30907914988541218548334654769860208034515380859375}],["If `f = g = h` everywhere but at `i`, where `f i = g i + h i`, then the product of `f` over `s`\nis the sum of the products of `g` and `h`. ",{"type":"∀ {β : Type u} {α : Type v} [inst : CommSemiring β] {s : Finset α} {i : α} {f g h : α → β},\n  i ∈ s →\n    g i + h i = f i →\n      (∀ j ∈ s, j ≠ i → g j = f j) →\n        (∀ j ∈ s, j ≠ i → h j = f j) →\n          ((Finset.prod s fun i => g i) + Finset.prod s fun i => h i) = Finset.prod s fun i => f i","name":"Finset.prod_add_prod_eq","isProp":true,"docString":"If `f = g = h` everywhere but at `i`, where `f i = g i + h i`, then the product of `f` over `s`\nis the sum of the products of `g` and `h`. ","distance":0.309243651836054900261530065108672715723514556884765625}],["`sum.mul s1 s2` distributes the multiplication of two sums. ",{"type":"Linarith.Sum → Linarith.Sum → Linarith.Sum","name":"Linarith.Sum.mul","isProp":false,"docString":"`sum.mul s1 s2` distributes the multiplication of two sums. ","distance":0.309335472686918910856235243045375682413578033447265625}]]