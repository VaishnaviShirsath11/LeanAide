[["The statement to be proved inductively ",{"type":"{F : Type u_1} ‚Üí\n  [inst : Field F] ‚Üí {E : Type u_2} ‚Üí [inst_1 : Field E] ‚Üí [inst_2 : Algebra F E] ‚Üí ‚Ü•(solvableByRad F E) ‚Üí Prop","name":"solvableByRad.P","isProp":false,"docString":"The statement to be proved inductively ","distance":0.286408952520357418247698433333425782620906829833984375}],[" The theorem states that to prove a property for all families of finite sets, it suffices to verify it for the empty family, the family consisting only of the empty set, and show that if the property holds for families without a specific element and with that element in every set, then it holds for their union.",{"type":"‚àÄ {Œ± : Type u_1} [inst : DecidableEq Œ±] {p : Finset (Finset Œ±) ‚Üí Prop} (ùíú : Finset (Finset Œ±)),\n  p ‚àÖ ‚Üí\n    p {‚àÖ} ‚Üí\n      (‚àÄ (a : Œ±) ‚¶Éùíú : Finset (Finset Œ±)‚¶Ñ, (‚àÄ s ‚àà ùíú, a ‚àâ s) ‚Üí p ùíú ‚Üí p (Finset.image (insert a) ùíú)) ‚Üí\n        (‚àÄ (a : Œ±) ‚¶Éùíú : Finset (Finset Œ±)‚¶Ñ,\n            p (Finset.filter (fun x => a ‚àâ x) ùíú) ‚Üí p (Finset.filter (fun x => a ‚àà x) ùíú) ‚Üí p ùíú) ‚Üí\n          p ùíú","name":"Finset.family_induction_on","isProp":true,"docString":" The theorem states that to prove a property for all families of finite sets, it suffices to verify it for the empty family, the family consisting only of the empty set, and show that if the property holds for families without a specific element and with that element in every set, then it holds for their union.","distance":0.416431008351586362525864615236059762537479400634765625}],["This theorem states that the number 2 is not equal to infinity. In Lean, \"‚ä§\" is used to represent infinity, usually in the context of extended non-negative real numbers (where real numbers are extended by adding infinity as a value). The proof, which is not shown here, establishes that 2 cannot be the same as infinity, which is intuitively obvious in the realm of real numbers.",{"type":"(2 = ‚ä§) = False","name":"Mathlib.Data.ENNReal.Basic._auxLemma.32","isProp":true,"docString":"This theorem states that the number 2 is not equal to infinity. In Lean, \"‚ä§\" is used to represent infinity, usually in the context of extended non-negative real numbers (where real numbers are extended by adding infinity as a value). The proof, which is not shown here, establishes that 2 cannot be the same as infinity, which is intuitively obvious in the realm of real numbers.","distance":0.400160187506628073350611884961836040019989013671875}],["Evidence that the proposed colimit is the colimit. ",{"type":"{J : Type v} ‚Üí\n  [inst : CategoryTheory.SmallCategory J] ‚Üí\n    (F : CategoryTheory.Functor J MonCat) ‚Üí CategoryTheory.Limits.IsColimit (MonCat.Colimits.colimitCocone F)","name":"MonCat.Colimits.colimitIsColimit","isProp":false,"docString":"Evidence that the proposed colimit is the colimit. ","distance":0.29832023037730592829319675729493610560894012451171875}],[" To prove a property holds for any multivariate polynomial over a commutative semiring, it suffices to show that it holds for all monomials and is preserved under polynomial addition.",{"type":"‚àÄ {R : Type u} {œÉ : Type u_1} [inst : CommSemiring R] {P : MvPolynomial œÉ R ‚Üí Prop} (p : MvPolynomial œÉ R),\n  (‚àÄ (u : œÉ ‚Üí‚ÇÄ ‚Ñï) (a : R), P ((MvPolynomial.monomial u) a)) ‚Üí (‚àÄ (p q : MvPolynomial œÉ R), P p ‚Üí P q ‚Üí P (p + q)) ‚Üí P p","name":"MvPolynomial.induction_on'","isProp":true,"docString":" To prove a property holds for any multivariate polynomial over a commutative semiring, it suffices to show that it holds for all monomials and is preserved under polynomial addition.","distance":0.416781277400161964674651926543447189033031463623046875}],["This theorem from Measure Theory in Mathlib (a library for the Lean Theorem Prover) states that for any two propositions `a` and `b`, the statement \"there exists an instance where `a` is true such that `b` is also true\" is equivalent to the statement \"`a` is true and `b` is true\". This establishes an equivalence between two different ways of expressing a joint assertion in logic.",{"type":"‚àÄ {b a : Prop}, (‚àÉ (_ : a), b) = (a ‚àß b)","name":"Mathlib.MeasureTheory.Measure.Lebesgue.Basic._auxLemma.10","isProp":true,"docString":"This theorem from Measure Theory in Mathlib (a library for the Lean Theorem Prover) states that for any two propositions `a` and `b`, the statement \"there exists an instance where `a` is true such that `b` is also true\" is equivalent to the statement \"`a` is true and `b` is true\". This establishes an equivalence between two different ways of expressing a joint assertion in logic.","distance":0.40156471740262833503010142521816305816173553466796875}],["The proof that is the limit cone ",{"type":"{J : Type u‚ÇÅ} ‚Üí\n  [inst : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} J] ‚Üí\n    {C : Type u} ‚Üí\n      [inst_1 : CategoryTheory.Category.{v, u} C] ‚Üí\n        {F : CategoryTheory.Functor J C} ‚Üí\n          (self : CategoryTheory.Limits.LimitCone F) ‚Üí CategoryTheory.Limits.IsLimit self.cone","name":"CategoryTheory.Limits.LimitCone.isLimit","isProp":false,"docString":"The proof that is the limit cone ","distance":0.299035764829897410255199474704568274319171905517578125}],["The proof that it is the colimit cocone ",{"type":"{J : Type u‚ÇÅ} ‚Üí\n  [inst : CategoryTheory.Category.{v‚ÇÅ, u‚ÇÅ} J] ‚Üí\n    {C : Type u} ‚Üí\n      [inst_1 : CategoryTheory.Category.{v, u} C] ‚Üí\n        {F : CategoryTheory.Functor J C} ‚Üí\n          (self : CategoryTheory.Limits.ColimitCocone F) ‚Üí CategoryTheory.Limits.IsColimit self.cocone","name":"CategoryTheory.Limits.ColimitCocone.isColimit","isProp":false,"docString":"The proof that it is the colimit cocone ","distance":0.30374515722843986598178389613167382776737213134765625}],["Proof of right inverse ",{"type":"‚àÄ {Œ± : Type u} [self : Rack Œ±] (x : Œ±), Function.RightInverse (Rack.invAct x) (Shelf.act x)","name":"Rack.right_inv","isProp":true,"docString":"Proof of right inverse ","distance":0.307380077473629442774694098261534236371517181396484375}],["(Impl) Show that the raised cone is a limit. ",{"type":"{J : Type v} ‚Üí\n  [inst : CategoryTheory.SmallCategory J] ‚Üí\n    {C : Type u} ‚Üí\n      [inst_1 : CategoryTheory.Category.{v, u} C] ‚Üí\n        [inst_2 : CategoryTheory.IsConnected J] ‚Üí\n          {B : C} ‚Üí\n            {F : CategoryTheory.Functor J (CategoryTheory.Over B)} ‚Üí\n              {c : CategoryTheory.Limits.Cone (CategoryTheory.Functor.comp F (CategoryTheory.Over.forget B))} ‚Üí\n                CategoryTheory.Limits.IsLimit c ‚Üí\n                  CategoryTheory.Limits.IsLimit (CategoryTheory.Over.CreatesConnected.raiseCone c)","name":"CategoryTheory.Over.CreatesConnected.raisedConeIsLimit","isProp":false,"docString":"(Impl) Show that the raised cone is a limit. ","distance":0.310525211572116599523241120550665073096752166748046875}],["Compose two proofs by transitivity, generalized over the relations involved. ",{"type":"{Œ± : Sort u_1} ‚Üí\n  {Œ≤ : Sort u_2} ‚Üí\n    {Œ≥ : Sort u_3} ‚Üí\n      {r : Œ± ‚Üí Œ≤ ‚Üí Sort u} ‚Üí\n        {s : Œ≤ ‚Üí Œ≥ ‚Üí Sort v} ‚Üí\n          {t : outParam (Œ± ‚Üí Œ≥ ‚Üí Sort w)} ‚Üí [self : Trans r s t] ‚Üí {a : Œ±} ‚Üí {b : Œ≤} ‚Üí {c : Œ≥} ‚Üí r a b ‚Üí s b c ‚Üí t a c","name":"Trans.trans","isProp":false,"docString":"Compose two proofs by transitivity, generalized over the relations involved. ","distance":0.32289987926011709529205973012722097337245941162109375}],["Proof of left inverse ",{"type":"‚àÄ {Œ± : Type u} [self : Rack Œ±] (x : Œ±), Function.LeftInverse (Rack.invAct x) (Shelf.act x)","name":"Rack.left_inv","isProp":true,"docString":"Proof of left inverse ","distance":0.323719104131143409208704042612225748598575592041015625}],["Proof of the continuity of the map. ",{"type":"‚àÄ {F : Type u_1} {A : outParam (Type u_7)} {B : outParam (Type u_8)} [inst : Monoid A] [inst_1 : Monoid B]\n  [inst_2 : TopologicalSpace A] [inst_3 : TopologicalSpace B] [self : ContinuousMonoidHomClass F A B] (f : F),\n  Continuous ‚áëf","name":"ContinuousMonoidHomClass.map_continuous","isProp":true,"docString":"Proof of the continuity of the map. ","distance":0.327225195274756630592349893049686215817928314208984375}],["Shows that `fib` indeed satisfies the Fibonacci recurrence `F‚Çô‚Çä‚ÇÇ = F‚Çô + F‚Çô‚Çä‚ÇÅ.` ",{"type":"‚àÄ {n : ‚Ñï}, Nat.fib (n + 2) = Nat.fib n + Nat.fib (n + 1)","name":"Nat.fib_add_two","isProp":true,"docString":"Shows that `fib` indeed satisfies the Fibonacci recurrence `F‚Çô‚Çä‚ÇÇ = F‚Çô + F‚Çô‚Çä‚ÇÅ.` ","distance":0.329702458387711228038341459978255443274974822998046875}],["Proof of type equality as an arrow ",{"type":"{n : ‚Ñï} ‚Üí\n  (P : MvPFunctor.{u} (n + 1)) ‚Üí\n    {a a' : P.A} ‚Üí a = a' ‚Üí TypeVec.Arrow (MvPFunctor.B (MvPFunctor.drop P) a) (MvPFunctor.B (MvPFunctor.drop P) a')","name":"MvPFunctor.castDropB","isProp":false,"docString":"Proof of type equality as an arrow ","distance":0.33143930602574267485493919593864120543003082275390625}],["Proof of continuity of the Hom. ",{"type":"‚àÄ {A : Type u_2} {B : Type u_3} [inst : Monoid A] [inst_1 : Monoid B] [inst_2 : TopologicalSpace A]\n  [inst_3 : TopologicalSpace B] (self : ContinuousMonoidHom A B), Continuous self.toFun","name":"ContinuousMonoidHom.continuous_toFun","isProp":true,"docString":"Proof of continuity of the Hom. ","distance":0.3315064254857225112260721289203502237796783447265625}],["Correspondence theorem ",{"type":"{R : Type u} ‚Üí\n  {S : Type v} ‚Üí\n    {F : Type u_1} ‚Üí\n      [inst : Ring R] ‚Üí\n        [inst_1 : Ring S] ‚Üí\n          [inst_2 : RingHomClass F R S] ‚Üí (f : F) ‚Üí Function.Surjective ‚áëf ‚Üí Ideal S ‚âÉo { p // Ideal.comap f ‚ä• ‚â§ p }","name":"Ideal.relIsoOfSurjective","isProp":false,"docString":"Correspondence theorem ","distance":0.335493599654685892286209991652867756783962249755859375}],["Show the equalizing cocone is a colimit ",{"type":"{C : Type u} ‚Üí\n  [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n    [inst_1 : CategoryTheory.Limits.HasBinaryCoproducts C] ‚Üí\n      [inst_2 : CategoryTheory.Limits.HasPushouts C] ‚Üí\n        (F : CategoryTheory.Functor CategoryTheory.Limits.WalkingParallelPair C) ‚Üí\n          CategoryTheory.Limits.IsColimit\n            (CategoryTheory.Limits.HasCoequalizersOfHasPushoutsAndBinaryCoproducts.coequalizerCocone F)","name":"CategoryTheory.Limits.HasCoequalizersOfHasPushoutsAndBinaryCoproducts.coequalizerCoconeIsColimit","isProp":false,"docString":"Show the equalizing cocone is a colimit ","distance":0.33854879586821606807234275038354098796844482421875}],["Use the above equivalence to prove we have a limit. ",{"type":"‚àÄ {J : Type w} {C : Type u} [inst : CategoryTheory.Category.{v, u} C] {B : C}\n  (F : CategoryTheory.Functor (CategoryTheory.Discrete J) (CategoryTheory.Over B))\n  [inst_1 :\n    CategoryTheory.Limits.HasLimit (CategoryTheory.Over.ConstructProducts.widePullbackDiagramOfDiagramOver B F)],\n  CategoryTheory.Limits.HasLimit F","name":"CategoryTheory.Over.ConstructProducts.has_over_limit_discrete_of_widePullback_limit","isProp":true,"docString":"Use the above equivalence to prove we have a limit. ","distance":0.340875618044433059683484543711529113352298736572265625}],["Shows that definability is closed under finite projections. ",{"type":"‚àÄ {M : Type w} {A : Set M} {L : FirstOrder.Language} [inst : FirstOrder.Language.Structure L M] {Œ± : Type u‚ÇÅ}\n  {Œ≤ : Type u_1} {s : Set (Œ≤ ‚Üí M)},\n  Set.Definable A L s ‚Üí ‚àÄ (f : Œ± ‚Üí Œ≤) [inst_1 : Finite Œ±] [inst_2 : Finite Œ≤], Set.Definable A L ((fun g => g ‚àò f) '' s)","name":"Set.Definable.image_comp","isProp":true,"docString":"Shows that definability is closed under finite projections. ","distance":0.342445622243701064402188194435439072549343109130859375}],["Shows that all denominators are nonnegative. ",{"type":"‚àÄ {K : Type u_1} {v : K} {n : ‚Ñï} [inst : LinearOrderedField K] [inst_1 : FloorRing K],\n  0 ‚â§ GeneralizedContinuedFraction.denominators (GeneralizedContinuedFraction.of v) n","name":"GeneralizedContinuedFraction.zero_le_of_denom","isProp":true,"docString":"Shows that all denominators are nonnegative. ","distance":0.34273167444014374094507502377382479608058929443359375}],["A convenient way to show that a binary cofan is a colimit. ",{"type":"{C : Type u} ‚Üí\n  [inst : CategoryTheory.Category.{v, u} C] ‚Üí\n    {X Y : C} ‚Üí\n      (s : CategoryTheory.Limits.BinaryCofan X Y) ‚Üí\n        (desc : {T : C} ‚Üí (X ‚ü∂ T) ‚Üí (Y ‚ü∂ T) ‚Üí (s.pt ‚ü∂ T)) ‚Üí\n          (‚àÄ {T : C} (f : X ‚ü∂ T) (g : Y ‚ü∂ T),\n              CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.BinaryCofan.inl s) (desc f g) = f) ‚Üí\n            (‚àÄ {T : C} (f : X ‚ü∂ T) (g : Y ‚ü∂ T),\n                CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.BinaryCofan.inr s) (desc f g) = g) ‚Üí\n              (‚àÄ {T : C} (f : X ‚ü∂ T) (g : Y ‚ü∂ T) (m : s.pt ‚ü∂ T),\n                  CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.BinaryCofan.inl s) m = f ‚Üí\n                    CategoryTheory.CategoryStruct.comp (CategoryTheory.Limits.BinaryCofan.inr s) m = g ‚Üí m = desc f g) ‚Üí\n                CategoryTheory.Limits.IsColimit s","name":"CategoryTheory.Limits.BinaryCofan.IsColimit.mk","isProp":false,"docString":"A convenient way to show that a binary cofan is a colimit. ","distance":0.342849313932918342562317093324963934719562530517578125}],["Shows that $e^{x} * e^{-x} = 1$ ",{"type":"‚àÄ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ‚Ñö A],\n  PowerSeries.exp A * PowerSeries.evalNegHom (PowerSeries.exp A) = 1","name":"PowerSeries.exp_mul_exp_neg_eq_one","isProp":true,"docString":"Shows that $e^{x} * e^{-x} = 1$ ","distance":0.343185434735752414869836002253578044474124908447265625}],["Shows that $(e^{X})^k = e^{kX}$. ",{"type":"‚àÄ {A : Type u_1} [inst : CommRing A] [inst_1 : Algebra ‚Ñö A] (k : ‚Ñï),\n  PowerSeries.exp A ^ k = (PowerSeries.rescale ‚Üëk) (PowerSeries.exp A)","name":"PowerSeries.exp_pow_eq_rescale_exp","isProp":true,"docString":"Shows that $(e^{X})^k = e^{kX}$. ","distance":0.3461191039438791250404392485506832599639892578125}]]