[["Append a stream to a list. ",{"type":"{α : Type u} → List α → Stream' α → Stream' α","name":"Stream'.appendStream'","isProp":false,"docString":"Append a stream to a list. ","distance":1.78817714034125874178471349296160042285919189453125}],[" Given a pseudo metric space `X` and type `M` such that `M` can be isometrically added to `X`, the distance between any two points `x` and `y` in `X` is equal to the distance between `x + c` and `y + c` for any constant `c` of type `M`.",{"type":"∀ {M : Type u} {X : Type w} [inst : PseudoMetricSpace X] [inst_1 : VAdd M X] [inst_2 : IsometricVAdd M X] (c : M)\n  (x y : X), dist (c +ᵥ x) (c +ᵥ y) = dist x y","name":"dist_vadd","isProp":true,"docString":" Given a pseudo metric space `X` and type `M` such that `M` can be isometrically added to `X`, the distance between any two points `x` and `y` in `X` is equal to the distance between `x + c` and `y + c` for any constant `c` of type `M`.","distance":1.8513045691600413800159685706603340804576873779296875}],["The `Stream'.Seq.cons_append` theorem states that for any type `α`, any element `a` of type `α`, and any two sequences `s` and `t` of type `α`, appending sequence `t` to the sequence obtained by prepending `a` to sequence `s` (`Stream'.Seq.append (Stream'.Seq.cons a s) t`) is equivalent to prepending `a` to the sequence obtained by appending `s` and `t` (`Stream'.Seq.cons a (Stream'.Seq.append s t)`). This is a property of sequence concatenation and prepending in potentially infinite lists, which mirrors the traditional property of list concatenation and cons operation in finite lists.",{"type":"∀ {α : Type u} (a : α) (s t : Stream'.Seq α), (Stream'.Seq.cons a s).append t = Stream'.Seq.cons a (s.append t)","name":"Stream'.Seq.cons_append","isProp":true,"docString":"The `Stream'.Seq.cons_append` theorem states that for any type `α`, any element `a` of type `α`, and any two sequences `s` and `t` of type `α`, appending sequence `t` to the sequence obtained by prepending `a` to sequence `s` (`Stream'.Seq.append (Stream'.Seq.cons a s) t`) is equivalent to prepending `a` to the sequence obtained by appending `s` and `t` (`Stream'.Seq.cons a (Stream'.Seq.append s t)`). This is a property of sequence concatenation and prepending in potentially infinite lists, which mirrors the traditional property of list concatenation and cons operation in finite lists.","distance":1.864064125029479601636239749495871365070343017578125}],["Construct a pseudo-metric space structure whose underlying topological space structure\n(definitionally) agrees which a pre-existing topology which is compatible with a given distance\nfunction. ",{"type":"{α : Type u} →\n  [inst : TopologicalSpace α] →\n    (dist : α → α → ℝ) →\n      (∀ (x : α), dist x x = 0) →\n        (∀ (x y : α), dist x y = dist y x) →\n          (∀ (x y z : α), dist x z ≤ dist x y + dist y z) →\n            (∀ (s : Set α), IsOpen s ↔ ∀ x ∈ s, ∃ ε > 0, ∀ (y : α), dist x y < ε → y ∈ s) → PseudoMetricSpace α","name":"PseudoMetricSpace.ofDistTopology","isProp":false,"docString":"Construct a pseudo-metric space structure whose underlying topological space structure\n(definitionally) agrees which a pre-existing topology which is compatible with a given distance\nfunction. ","distance":1.8288795096500665149363840100704692304134368896484375}],[" For any pseudometric space `α` and points `x` and `y` of type `α`, the non-negative distance `nndist x y` between them equals the regular distance `dist x y` converted to a non-negative real number.",{"type":"∀ {α : Type u} [inst : PseudoMetricSpace α] (x y : α), nndist x y = (dist x y).toNNReal","name":"nndist_dist","isProp":true,"docString":" For any pseudometric space `α` and points `x` and `y` of type `α`, the non-negative distance `nndist x y` between them equals the regular distance `dist x y` converted to a non-negative real number.","distance":1.8568208989615133663875212732818908989429473876953125}],["This theorem expresses the non-negative distance (`nndist`) between two points in the context of a pseudometric space in terms of the regular distance (`dist`). More specifically, for any type `α` that forms a PseudoMetricSpace, and for any two points `x` and `y` of type `α`, the non-negative distance between `x` and `y` is equal to the regular distance between `x` and `y` converted to a non-negative real number.",{"type":"∀ {α : Type u} [inst : PseudoMetricSpace α] (x y : α), nndist x y = (dist x y).toNNReal","name":"nndist_dist","isProp":true,"docString":"This theorem expresses the non-negative distance (`nndist`) between two points in the context of a pseudometric space in terms of the regular distance (`dist`). More specifically, for any type `α` that forms a PseudoMetricSpace, and for any two points `x` and `y` of type `α`, the non-negative distance between `x` and `y` is equal to the regular distance between `x` and `y` converted to a non-negative real number.","distance":1.8700426318259577573854812726494856178760528564453125}],["Alternative `Dilation` constructor when the distance hypothesis is over `nndist` ",{"type":"{α : Type u_5} →\n  {β : Type u_6} →\n    [inst : PseudoMetricSpace α] →\n      [inst_1 : PseudoMetricSpace β] →\n        (f : α → β) → (∃ r, r ≠ 0 ∧ ∀ (x y : α), nndist (f x) (f y) = r * nndist x y) → α →ᵈ β","name":"Dilation.mkOfNNDistEq","isProp":false,"docString":"Alternative `Dilation` constructor when the distance hypothesis is over `nndist` ","distance":1.8329937942467158240589242268470115959644317626953125}],["A distance on an open subset `s` of a metric space, designed to make it complete.  It is given\nby `dist' x y = dist x y + |1 / dist x sᶜ - 1 / dist y sᶜ|`, where the second term blows up close to\nthe boundary to ensure that Cauchy sequences for `dist'` remain well inside `s`. ",{"type":"{α : Type u_1} → [inst : MetricSpace α] → {s : TopologicalSpace.Opens α} → Dist s.CompleteCopy","name":"TopologicalSpace.Opens.CompleteCopy.instDist","isProp":false,"docString":"A distance on an open subset `s` of a metric space, designed to make it complete.  It is given\nby `dist' x y = dist x y + |1 / dist x sᶜ - 1 / dist y sᶜ|`, where the second term blows up close to\nthe boundary to ensure that Cauchy sequences for `dist'` remain well inside `s`. ","distance":1.8404618795096603367511534088407643139362335205078125}],["Replace `range` with `newText`.\nIf `newSelection?` is absent, place the cursor at the end of the new text.\nIf `newSelection?` is present, make the specified selection instead.\nSee also `MakeEditLinkProps.ofReplaceRange`.\n",{"type":"Lean.Server.DocumentMeta →\n  Lean.Lsp.Range → String → optParam (Option Lean.Lsp.Range) none → ProofWidgets.MakeEditLinkProps","name":"ProofWidgets.MakeEditLinkProps.ofReplaceRange'","isProp":false,"docString":"Replace `range` with `newText`.\nIf `newSelection?` is absent, place the cursor at the end of the new text.\nIf `newSelection?` is present, make the specified selection instead.\nSee also `MakeEditLinkProps.ofReplaceRange`.\n","distance":1.8411587024798083955801075717317871749401092529296875}],["The Penrose substance program.\nNote that `embeds` are added lazily at the end. ",{"type":"ProofWidgets.Penrose.DiagramState → String","name":"ProofWidgets.Penrose.DiagramState.sub","isProp":false,"docString":"The Penrose substance program.\nNote that `embeds` are added lazily at the end. ","distance":1.84157140661494622690952382981777191162109375}],["The optimal coupling constructed above realizes exactly the Gromov-Hausdorff distance,\nessentially by design. ",{"type":"∀ {X : Type u} [inst : MetricSpace X] [inst_1 : CompactSpace X] [inst_2 : Nonempty X] {Y : Type v}\n  [inst_3 : MetricSpace Y] [inst_4 : CompactSpace Y] [inst_5 : Nonempty Y],\n  Metric.hausdorffDist (Set.range (GromovHausdorff.optimalGHInjl X Y)) (Set.range (GromovHausdorff.optimalGHInjr X Y)) =\n    GromovHausdorff.ghDist X Y","name":"GromovHausdorff.hausdorffDist_optimal","isProp":true,"docString":"The optimal coupling constructed above realizes exactly the Gromov-Hausdorff distance,\nessentially by design. ","distance":1.8452450760597340906343788446974940598011016845703125}],["Core logic of a text based linter: given a collection of lines,\nreturn an array of all style errors with line numbers. If possible,\nalso return the collection of all lines, changed as needed to fix the linter errors.\n(Such automatic fixes are only possible for some kinds of `StyleError`s.)\n",{"type":"Type","name":"Mathlib.Linter.TextBased.TextbasedLinter","isProp":false,"docString":"Core logic of a text based linter: given a collection of lines,\nreturn an array of all style errors with line numbers. If possible,\nalso return the collection of all lines, changed as needed to fix the linter errors.\n(Such automatic fixes are only possible for some kinds of `StyleError`s.)\n","distance":1.8475973558313516509343799043563194572925567626953125}],["Alternative `Dilation` constructor when the distance hypothesis is over `dist` ",{"type":"{α : Type u_5} →\n  {β : Type u_6} →\n    [inst : PseudoMetricSpace α] →\n      [inst_1 : PseudoMetricSpace β] →\n        (f : α → β) → (∃ r, r ≠ 0 ∧ ∀ (x y : α), dist (f x) (f y) = ↑r * dist x y) → α →ᵈ β","name":"Dilation.mkOfDistEq","isProp":false,"docString":"Alternative `Dilation` constructor when the distance hypothesis is over `dist` ","distance":1.8488140350080051188541574447299353778362274169921875}],["Metric space structure on `ℕ → ℕ` where the distance is given by `dist x y = (1/2)^n`,\nwhere `n` is the smallest index where `x` and `y` differ.\nNot registered as a global instance by default. ",{"type":"MetricSpace (ℕ → ℕ)","name":"PiNat.metricSpaceNatNat","isProp":false,"docString":"Metric space structure on `ℕ → ℕ` where the distance is given by `dist x y = (1/2)^n`,\nwhere `n` is the smallest index where `x` and `y` differ.\nNot registered as a global instance by default. ","distance":1.849001654045876907872525407583452761173248291015625}],["(Implementation detail) the constructed `GlueData.t'` from a `GlueData'`. ",{"type":"{C : Type u₁} →\n  [inst : CategoryTheory.Category.{v, u₁} C] →\n    (D : CategoryTheory.GlueData' C) →\n      (i j k : D.J) →\n        CategoryTheory.Limits.pullback (D.f' i j) (D.f' i k) ⟶ CategoryTheory.Limits.pullback (D.f' j k) (D.f' j i)","name":"CategoryTheory.GlueData'.t''","isProp":false,"docString":"(Implementation detail) the constructed `GlueData.t'` from a `GlueData'`. ","distance":1.8541469404856016911509186684270389378070831298828125}],["Pull back a pseudometric space structure by an inducing map. This is a version of\n`PseudoMetricSpace.induced` useful in case if the domain already has a `TopologicalSpace`\nstructure. ",{"type":"{α : Type u_3} →\n  {β : Type u_4} →\n    [inst : TopologicalSpace α] → [m : PseudoMetricSpace β] → {f : α → β} → Topology.IsInducing f → PseudoMetricSpace α","name":"Topology.IsInducing.comapPseudoMetricSpace","isProp":false,"docString":"Pull back a pseudometric space structure by an inducing map. This is a version of\n`PseudoMetricSpace.induced` useful in case if the domain already has a `TopologicalSpace`\nstructure. ","distance":1.8543375234253753891522364938282407820224761962890625}],["Replace `range` with `newText`.\nIf `newSelection?` is absent, place the cursor at the end of the new text.\nIf `newSelection?` is present, select the range it specifies within `newText`.\nSee also `MakeEditLinkProps.ofReplaceRange'`. ",{"type":"Lean.Server.DocumentMeta →\n  Lean.Lsp.Range → String → optParam (Option (String.Pos × String.Pos)) none → ProofWidgets.MakeEditLinkProps","name":"ProofWidgets.MakeEditLinkProps.ofReplaceRange","isProp":false,"docString":"Replace `range` with `newText`.\nIf `newSelection?` is absent, place the cursor at the end of the new text.\nIf `newSelection?` is present, select the range it specifies within `newText`.\nSee also `MakeEditLinkProps.ofReplaceRange'`. ","distance":1.855212427724091117653415494714863598346710205078125}],["Isometries preserve the diameter in pseudoemetric spaces. ",{"type":"∀ {α : Type u} {β : Type v} [inst : PseudoEMetricSpace α] [inst_1 : PseudoEMetricSpace β] {f : α → β},\n  Isometry f → ∀ (s : Set α), EMetric.diam (f '' s) = EMetric.diam s","name":"Isometry.ediam_image","isProp":true,"docString":"Isometries preserve the diameter in pseudoemetric spaces. ","distance":1.855588030184139203271342921652831137180328369140625}],["Adds a term to a dfinsupp, making a dfinsupp indexed by an `Option`.\n\nThis is the dfinsupp version of `Option.rec`. ",{"type":"{ι : Type u} →\n  {α : Option ι → Type v} →\n    [inst : (i : Option ι) → Zero (α i)] → α none → (Π₀ (i : ι), α (some i)) → Π₀ (i : Option ι), α i","name":"DFinsupp.extendWith","isProp":false,"docString":"Adds a term to a dfinsupp, making a dfinsupp indexed by an `Option`.\n\nThis is the dfinsupp version of `Option.rec`. ","distance":1.857658069938759037853515110327862203121185302734375}],["Replace the current extension in a path `p` with `ext`.\n\n`ext` should not contain a `.`, as this function adds one.\nIf `ext` is the empty string, no `.` is added. ",{"type":"System.FilePath → String → System.FilePath","name":"System.FilePath.withExtension","isProp":false,"docString":"Replace the current extension in a path `p` with `ext`.\n\n`ext` should not contain a `.`, as this function adds one.\nIf `ext` is the empty string, no `.` is added. ","distance":1.858793679730479819767197113833390176296234130859375}],["Appends the extension `ext` to a path `p`.\n\n`ext` should not contain a leading `.`, as this function adds one.\nIf `ext` is the empty string, no `.` is added.\n\nUnlike `System.FilePath.withExtension`, this does not remove any existing extension. ",{"type":"System.FilePath → String → System.FilePath","name":"System.FilePath.addExtension","isProp":false,"docString":"Appends the extension `ext` to a path `p`.\n\n`ext` should not contain a leading `.`, as this function adds one.\nIf `ext` is the empty string, no `.` is added.\n\nUnlike `System.FilePath.withExtension`, this does not remove any existing extension. ","distance":1.859031046474616477581776052829809486865997314453125}],["An isometry preserves the diameter in pseudometric spaces. ",{"type":"∀ {α : Type u} {β : Type v} [inst : PseudoMetricSpace α] [inst_1 : PseudoMetricSpace β] {f : α → β},\n  Isometry f → ∀ (s : Set α), Metric.diam (f '' s) = Metric.diam s","name":"Isometry.diam_image","isProp":true,"docString":"An isometry preserves the diameter in pseudometric spaces. ","distance":1.8635571418027707668585435385466553270816802978515625}],["Nest with the default indentation amount.",{"type":"Lean.Format → Lean.Format","name":"Std.Format.nestD","isProp":false,"docString":"Nest with the default indentation amount.","distance":1.8637365195484740798548273232881911098957061767578125}],["Express `nndist` in terms of `dist`",{"type":"∀ {α : Type u} [inst : PseudoMetricSpace α] (x y : α), nndist x y = (dist x y).toNNReal","name":"nndist_dist","isProp":true,"docString":"Express `nndist` in terms of `dist`","distance":1.8639237605187446433774312026798725128173828125}]]