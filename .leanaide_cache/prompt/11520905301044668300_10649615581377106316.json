[["If `a` is even, then `n` is even iff `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n)","name":"Even.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is even iff `n % a` is even. ","distance":0.597620645802179328853753759176470339298248291015625}],[" For any natural number `n`, `n + 1` is even if and only if `n` is odd.",{"type":"∀ {m n : ℕ}, Even (m + n) = (Even m ↔ Even n)","name":"Mathlib.Data.Nat.Parity._auxLemma.13","isProp":true,"docString":" For any natural number `n`, `n + 1` is even if and only if `n` is odd.","distance":0.473288248716761172918410238708020187914371490478515625}],["This theorem states that for every natural number `n`, `n` is even if and only if `n` is not odd. Here, a number is defined as being even if it can be expressed as the sum of two identical numbers, and as being odd if it can be represented as `2*k + 1` for some natural number `k`. In other words, a natural number cannot be both even and odd simultaneously.",{"type":"∀ {n : ℕ}, Even n ↔ ¬Odd n","name":"Nat.even_iff_not_odd","isProp":true,"docString":"This theorem states that for every natural number `n`, `n` is even if and only if `n` is not odd. Here, a number is defined as being even if it can be expressed as the sum of two identical numbers, and as being odd if it can be represented as `2*k + 1` for some natural number `k`. In other words, a natural number cannot be both even and odd simultaneously.","distance":0.62541544260798531684741874414612539112567901611328125}],["If `n` is even and `a` is even, then `n % a` is even. ",{"type":"∀ {n a : ℕ}, Even n → Even a → Even (n % a)","name":"Even.mod_even","isProp":true,"docString":"If `n` is even and `a` is even, then `n % a` is even. ","distance":0.60200825538159563610207669626106508076190948486328125}],[" For any natural numbers n and a, n is even if and only if a is even implies the remainder of n divided by a is even.",{"type":"∀ {n a : ℕ}, Even a → (Even (n % a) ↔ Even n)","name":"Even.mod_even_iff","isProp":true,"docString":" For any natural numbers n and a, n is even if and only if a is even implies the remainder of n divided by a is even.","distance":0.5401595040443940565211278226342983543872833251953125}],["This theorem states that for every natural number `n`, the number is either even or odd. A natural number `n` is defined as even if it can be expressed as the sum of two identical numbers, and as odd if it can be expressed as `2*k + 1` for some number `k`. Thus, the theorem asserts that any natural number fits one of these two definitions.",{"type":"∀ (n : ℕ), Even n ∨ Odd n","name":"Nat.even_or_odd","isProp":true,"docString":"This theorem states that for every natural number `n`, the number is either even or odd. A natural number `n` is defined as even if it can be expressed as the sum of two identical numbers, and as odd if it can be expressed as `2*k + 1` for some number `k`. Thus, the theorem asserts that any natural number fits one of these two definitions.","distance":0.63206845655822008200885875339736230671405792236328125}],["If `a` is even, then `n` is odd iff `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Even a → (Odd (n % a) ↔ Odd n)","name":"Odd.mod_even_iff","isProp":true,"docString":"If `a` is even, then `n` is odd iff `n % a` is odd. ","distance":0.63327695446351117691818899402278475463390350341796875}],["If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ",{"type":"∀ {m n : ℕ}, Even (m ^ n) ↔ Even m ∧ n ≠ 0","name":"Nat.even_pow","isProp":true,"docString":"If `m` and `n` are natural numbers, then the natural number `m^n` is even\nif and only if `m` is even and `n` is positive. ","distance":0.64066793345501782397377610323019325733184814453125}],["If `n` is odd and `a` is even, then `n % a` is odd. ",{"type":"∀ {n a : ℕ}, Odd n → Even a → Odd (n % a)","name":"Odd.mod_even","isProp":true,"docString":"If `n` is odd and `a` is even, then `n % a` is odd. ","distance":0.65397272965749386752776217690552584826946258544921875}],["In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ",{"type":"∀ {n : ℕ} {k : Fin n}, Even k ↔ Odd n ∨ Even ↑k","name":"Fin.even_iff","isProp":true,"docString":"In `Fin n`, all elements are even for odd `n`,\notherwise an element is even iff its `Fin.val` value is even. ","distance":0.69594063800548422449310237425379455089569091796875}],["In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ",{"type":"∀ {n : ℕ} [inst : NeZero n] {k : Fin n}, Odd k ↔ Odd n ∨ Odd ↑k","name":"Fin.odd_iff","isProp":true,"docString":"In `Fin n`, all elements are odd for odd `n`,\notherwise an element is odd iff its `Fin.val` value is odd. ","distance":0.7367142919653633104104528683819808065891265869140625}],["The integers modulo `n : ℕ`. ",{"type":"ℕ → Type","name":"ZMod","isProp":false,"docString":"The integers modulo `n : ℕ`. ","distance":0.74971871252603750068743693191208876669406890869140625}],["`boddDiv2 n` returns a 2-tuple of type `(Bool, Nat)` where the `Bool` value indicates whether\n`n` is odd or not and the `Nat` value returns `⌊n/2⌋` ",{"type":"ℕ → Bool × ℕ","name":"Nat.boddDiv2","isProp":false,"docString":"`boddDiv2 n` returns a 2-tuple of type `(Bool, Nat)` where the `Bool` value indicates whether\n`n` is odd or not and the `Nat` value returns `⌊n/2⌋` ","distance":0.797698316856482403380823598126880824565887451171875}],["A (positive) natural number `n` is a sum of two squares if and only if the exponent of\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) ",{"type":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∀ {q : ℕ}, Nat.Prime q → q % 4 = 3 → Even (padicValNat q n)","name":"Nat.eq_sq_add_sq_iff","isProp":true,"docString":"A (positive) natural number `n` is a sum of two squares if and only if the exponent of\nevery prime `q` such that `q % 4 = 3` in the prime factorization of `n` is even.\n(The assumption `0 < n` is not present, since for `n = 0`, both sides are satisfied;\nthe right hand side holds, since `padicValNat q 0 = 0` by definition.) ","distance":0.7978461246428256714580129482783377170562744140625}],["Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ",{"type":"{P : ℕ → Sort u_1} →\n  ((n : ℕ) → ((k : ℕ) → k < 2 * n → P k) → P (2 * n)) →\n    ((n : ℕ) → ((k : ℕ) → k < 2 * n + 1 → P k) → P (2 * n + 1)) → (n : ℕ) → P n","name":"Nat.evenOddStrongRec","isProp":false,"docString":"Strong recursion principle on even and odd numbers: if for all `i : ℕ` we can prove `P (2 * i)`\nfrom `P j` for all `j < 2 * i` and we can prove `P (2 * i + 1)` from `P j` for all `j < 2 * i + 1`,\nthen we have `P n` for all `n : ℕ`. ","distance":0.8064041735732683235937656718306243419647216796875}],["`n : ℕ` is a _weird_ number if and only if it is abundant but not pseudoperfect. ",{"type":"ℕ → Prop","name":"Nat.Weird","isProp":false,"docString":"`n : ℕ` is a _weird_ number if and only if it is abundant but not pseudoperfect. ","distance":0.80791777195621861107355243802885524928569793701171875}],["If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. ",{"type":"∀ {n : ℕ}, n ≠ 0 → ∀ (p : ℕ), p ≠ 1 → ∃ e n', ¬p ∣ n' ∧ n = p ^ e * n'","name":"Nat.exists_eq_pow_mul_and_not_dvd","isProp":true,"docString":"If `n` is a nonzero natural number and `p ≠ 1`, then there are natural numbers `e`\nand `n'` such that `n'` is not divisible by `p` and `n = p^e * n'`. ","distance":0.8182187874141326755506042900378815829753875732421875}],["There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ",{"type":"∀ (N n : ℕ), (Finset.filter (fun k => k ≠ 0 ∧ n ∣ k) (Finset.range N.succ)).card = N / n","name":"Nat.card_multiples'","isProp":true,"docString":"There are exactly `⌊N/n⌋` positive multiples of `n` that are `≤ N`.\nSee `Nat.card_multiples` for a \"shifted-by-one\" version. ","distance":0.82548629363265202396604536261293105781078338623046875}],["Multiplication by `(n + 1 : ℕ)` behaves as expected. ",{"type":"∀ {M : Type u} [self : AddMonoid M] (n : ℕ) (x : M), AddMonoid.nsmul (n + 1) x = AddMonoid.nsmul n x + x","name":"AddMonoid.nsmul_succ","isProp":true,"docString":"Multiplication by `(n + 1 : ℕ)` behaves as expected. ","distance":0.83932381254544485837953970985836349427700042724609375}],["A natural number `n` is a sum of two squares if and only if `n = a^2 * b` with natural\nnumbers `a` and `b` such that `-1` is a square modulo `b`. ",{"type":"∀ {n : ℕ}, (∃ x y, n = x ^ 2 + y ^ 2) ↔ ∃ a b, n = a ^ 2 * b ∧ IsSquare (-1)","name":"Nat.eq_sq_add_sq_iff_eq_sq_mul","isProp":true,"docString":"A natural number `n` is a sum of two squares if and only if `n = a^2 * b` with natural\nnumbers `a` and `b` such that `-1` is a square modulo `b`. ","distance":0.84220987006992376056047078236588276922702789306640625}],["Recursion principle on even and odd numbers: if we have `P 0`, and for all `i : ℕ` we can\nextend from `P i` to both `P (2 * i)` and `P (2 * i + 1)`, then we have `P n` for all `n : ℕ`.\nThis is nothing more than a wrapper around `Nat.binaryRec`, to avoid having to switch to\ndealing with `bit0` and `bit1`. ",{"type":"{P : ℕ → Sort u_1} → P 0 → ((n : ℕ) → P n → P (2 * n)) → ((n : ℕ) → P n → P (2 * n + 1)) → (n : ℕ) → P n","name":"Nat.evenOddRec","isProp":false,"docString":"Recursion principle on even and odd numbers: if we have `P 0`, and for all `i : ℕ` we can\nextend from `P i` to both `P (2 * i)` and `P (2 * i + 1)`, then we have `P n` for all `n : ℕ`.\nThis is nothing more than a wrapper around `Nat.binaryRec`, to avoid having to switch to\ndealing with `bit0` and `bit1`. ","distance":0.8561359551451090954543587940861470997333526611328125}],["Given a positive `n`, `Fin.ofNat' i` is `i % n` as an element of `Fin n`. ",{"type":"{n : ℕ} → [inst : NeZero n] → ℕ → Fin n","name":"Fin.ofNat''","isProp":false,"docString":"Given a positive `n`, `Fin.ofNat' i` is `i % n` as an element of `Fin n`. ","distance":0.85875497196698280522042523443815298378467559814453125}],["`bodd n` returns `true` if `n` is odd ",{"type":"ℕ → Bool","name":"Nat.bodd","isProp":false,"docString":"`bodd n` returns `true` if `n` is odd ","distance":0.85888533596793792401768996569444425404071807861328125}],["Compute `i % n`, where `n` is a `Nat` and inferred the type of `i`. ",{"type":"{n m : ℕ} → Fin (m * n) → Fin n","name":"Fin.modNat","isProp":false,"docString":"Compute `i % n`, where `n` is a `Nat` and inferred the type of `i`. ","distance":0.86106486509696711362238374931621365249156951904296875}]]