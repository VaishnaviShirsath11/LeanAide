[["If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","distance":0.594257122899473966270988967153243720531463623046875}],[" For all natural numbers `k` and `n`, if `k > 0` then `n < n + k`.",{"type":"∀ {k n : ℕ}, 0 < k → n < n + k","name":"Nat.lt_add_of_pos_right","isProp":true,"docString":" For all natural numbers `k` and `n`, if `k > 0` then `n < n + k`.","distance":0.5746742164819533815744989624363370239734649658203125}],["This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","distance":0.570296415966467851177412740071304142475128173828125}],[" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)",{"value":null,"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","statement":"theorem PNat.exists_eq_succ_of_ne_one : ∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1 := by sorry","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","description":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","concise-description":" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)"}],["Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ",{"type":"(k : ℕ) → { n // n ∉ Multiset.range k } ≃ ℕ","name":"notMemRangeEquiv","isProp":false,"docString":"Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ","distance":0.74112662071922630335762960385181941092014312744140625}],[" For all natural numbers `k` and `n`, if `k > 0` then `n < k + n`.",{"type":"∀ {k n : ℕ}, 0 < k → n < k + n","name":"Nat.lt_add_of_pos_left","isProp":true,"docString":" For all natural numbers `k` and `n`, if `k > 0` then `n < k + n`.","distance":0.582495860055980418934495901339687407016754150390625}],["This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.",{"type":"∀ {n : ℕ}, n ≠ 0 → ∃ k, n = k.succ","name":"Nat.exists_eq_succ_of_ne_zero","isProp":true,"docString":"This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.","distance":0.605765761517234491151384645490907132625579833984375}],[" The theorem `Nat.choose_succ_succ` in Lean 4 states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` equals the sum of the binomial coefficients of `n` choose `k` and `n` choose `k+1`. In mathematical notation, $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$.",{"value":null,"type":"∀ (n k : ℕ), n.succ.choose k.succ = n.choose k + n.choose k.succ","statement":"theorem Nat.choose_succ_succ : ∀ (n k : ℕ), n.succ.choose k.succ = n.choose k + n.choose k.succ := by sorry","name":"Nat.choose_succ_succ","isProp":true,"description":"The theorem `Nat.choose_succ_succ` is about binomial coefficients (commonly denoted by \"n choose k\") in combinatorics. It states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` is equal to the sum of the binomial coefficient of `n` choose `k` and the binomial coefficient of `n` choose `k+1`. In other words, this theorem is a formalization of the Pascal's Rule, which is a fundamental property of binomial coefficients used in combinatorial mathematics. The theorem may be written in LaTeX mathematics as: $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$.","concise-description":" The theorem `Nat.choose_succ_succ` in Lean 4 states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` equals the sum of the binomial coefficients of `n` choose `k` and `n` choose `k+1`. In mathematical notation, $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$."}],["`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ",{"type":"{R : Type u_1} → [inst : CommMonoidWithZero R] → R → Prop","name":"IsPrimePow","isProp":false,"docString":"`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ","distance":0.79978573193748692116145093677914701402187347412109375}],[" For any natural numbers `m` and `n` with `m < n`, there exists a natural number `k` such that `n = m + k + 1`.",{"type":"∀ {m n : ℕ}, m < n → ∃ k, n = m + k + 1","name":"Nat.exists_eq_add_of_lt","isProp":true,"docString":" For any natural numbers `m` and `n` with `m < n`, there exists a natural number `k` such that `n = m + k + 1`.","distance":0.6034528069279172513006415101699531078338623046875}],["This theorem states that for all natural numbers `n` and `k`, `n` is less than or equal to `n + k`. In mathematical terms, this theorem confirms that adding any natural number to another natural number results in a number that is either greater than or equal to the original number. It's an important foundational aspect of number theory and arithmetic.",{"type":"∀ (n k : ℕ), n ≤ n + k","name":"Nat.le_add_right","isProp":true,"docString":"This theorem states that for all natural numbers `n` and `k`, `n` is less than or equal to `n + k`. In mathematical terms, this theorem confirms that adding any natural number to another natural number results in a number that is either greater than or equal to the original number. It's an important foundational aspect of number theory and arithmetic.","distance":0.73419834535927874785699032145203091204166412353515625}],["For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ",{"type":"∀ {R : Type u_2} [inst : NormedRing R] (k : ℕ) {r : ℝ}, 1 < r → (fun n => ↑n ^ k) =o[Filter.atTop] fun n => r ^ n","name":"isLittleO_pow_const_const_pow_of_one_lt","isProp":true,"docString":"For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ","distance":0.80031115121903606546283072020742110908031463623046875}],[" For all natural numbers `n` and `k`, `n ≤ n + k`.",{"type":"∀ (n k : ℕ), n ≤ n + k","name":"Nat.le_add_right","isProp":true,"docString":" For all natural numbers `n` and `k`, `n ≤ n + k`.","distance":0.61659705558198629749000474475906230509281158447265625}],["This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.",{"type":"∀ {k n : ℕ}, 0 < k → n < n + k","name":"Nat.lt_add_of_pos_right","isProp":true,"docString":"This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.","distance":0.7595492642332832833318434495595283806324005126953125}],["If `n > 0` then `m` is not divisible by `n` iff it is between `n * k` and `n * (k + 1)`\nfor some `k`. ",{"type":"∀ {n : ℤ} (m : ℤ), 0 < n → ((∃ k, n * k < m ∧ m < n * (k + 1)) ↔ ¬n ∣ m)","name":"Int.exists_lt_and_lt_iff_not_dvd","isProp":true,"docString":"If `n > 0` then `m` is not divisible by `n` iff it is between `n * k` and `n * (k + 1)`\nfor some `k`. ","distance":0.826576007874971541156128296279348433017730712890625}],["positive integers summing to `n`",{"type":"{n : ℕ} → n.Partition → Multiset ℕ","name":"Nat.Partition.parts","isProp":false,"docString":"positive integers summing to `n`","distance":0.82785144198715931995735672899172641336917877197265625}],["The `n`th prime is greater or equal to `n + 2`. ",{"type":"∀ (n : ℕ), n + 2 ≤ Nat.nth Nat.Prime n","name":"Nat.add_two_le_nth_prime","isProp":true,"docString":"The `n`th prime is greater or equal to `n + 2`. ","distance":0.83485417375624637603692690390744246542453765869140625}],["`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ",{"type":"{n : ℕ} → Fin2 n → (k : ℕ) → Fin2 (n + k)","name":"Fin2.add","isProp":false,"docString":"`i + k : Fin2 (n + k)` when `i : Fin2 n` and `k : ℕ` ","distance":0.84269510456860785563293347877333872020244598388671875}]]