[["The sequence of natural numbers some 0, some 1, ... ",{"type":"Stream'.Seq ℕ","name":"Stream'.Seq.nats","isProp":false,"docString":"The sequence of natural numbers some 0, some 1, ... ","distance":0.2512863779410370312916711554862558841705322265625}],[" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)","distance":0.22760026098994645682438431322225369513034820556640625}],["This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","distance":0.2185159865315673688446196365475771017372608184814453125}],[" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)",{"value":null,"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","statement":"theorem PNat.exists_eq_succ_of_ne_one : ∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1 := by sorry","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","description":"This theorem states that for any positive natural number `n` that is not equal to `1`, there exists another positive natural number `k` such that `n` is the successor of `k`. In other words, if a positive natural number is not `1`, then it can be expressed as `k + 1` for some positive natural number `k`.","concise-description":" For every positive natural number `n` different from `1`, there exists a natural number `k` such that `n = Suc(k)`. (Here, `Suc` denotes the successor function.)"}],["If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ",{"type":"∀ {n : ℕ+}, n ≠ 1 → ∃ k, n = k + 1","name":"PNat.exists_eq_succ_of_ne_one","isProp":true,"docString":"If `n : ℕ+` is different from `1`, then it is the successor of some `k : ℕ+`. ","distance":0.27302379653107866630534772411920130252838134765625}],[" For any natural numbers `m` and `n` with `m < n`, there exists a natural number `k` such that `n = m + k + 1`.",{"type":"∀ {m n : ℕ}, m < n → ∃ k, n = m + k + 1","name":"Nat.exists_eq_add_of_lt","isProp":true,"docString":" For any natural numbers `m` and `n` with `m < n`, there exists a natural number `k` such that `n = m + k + 1`.","distance":0.2388938114353739983197755236687953583896160125732421875}],["This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.",{"type":"∀ {n : ℕ}, n ≠ 0 → ∃ k, n = k.succ","name":"Nat.exists_eq_succ_of_ne_zero","isProp":true,"docString":"This theorem states that for any natural number `n` that is not zero, there exists another natural number `k` such that `n` is the successor of `k`. In other words, if you have a nonzero natural number, it must be one greater than another natural number.","distance":0.2280297339764198738532030574788223020732402801513671875}],[" The theorem `Nat.choose_succ_succ` in Lean 4 states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` equals the sum of the binomial coefficients of `n` choose `k` and `n` choose `k+1`. In mathematical notation, $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$.",{"value":null,"type":"∀ (n k : ℕ), n.succ.choose k.succ = n.choose k + n.choose k.succ","statement":"theorem Nat.choose_succ_succ : ∀ (n k : ℕ), n.succ.choose k.succ = n.choose k + n.choose k.succ := by sorry","name":"Nat.choose_succ_succ","isProp":true,"description":"The theorem `Nat.choose_succ_succ` is about binomial coefficients (commonly denoted by \"n choose k\") in combinatorics. It states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` is equal to the sum of the binomial coefficient of `n` choose `k` and the binomial coefficient of `n` choose `k+1`. In other words, this theorem is a formalization of the Pascal's Rule, which is a fundamental property of binomial coefficients used in combinatorial mathematics. The theorem may be written in LaTeX mathematics as: $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$.","concise-description":" The theorem `Nat.choose_succ_succ` in Lean 4 states that for all natural numbers `n` and `k`, the binomial coefficient of `n+1` choose `k+1` equals the sum of the binomial coefficients of `n` choose `k` and `n` choose `k+1`. In mathematical notation, $\\binom{n+1}{k+1} = \\binom{n}{k} + \\binom{n}{k+1}$."}],["Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ",{"type":"(k : ℕ) → { n // n ∉ Multiset.range k } ≃ ℕ","name":"notMemRangeEquiv","isProp":false,"docString":"Equivalence between the set of natural numbers which are `≥ k` and `ℕ`, given by `n → n - k`. ","distance":0.297641854160211993818307973924675025045871734619140625}],[" For all natural numbers n and m, if n ≤ m, then there exists a natural number k such that n + k = m.",{"type":"∀ {n m : ℕ}, n ≤ m → ∃ k, n + k = m","name":"Nat.le.dest","isProp":true,"docString":" For all natural numbers n and m, if n ≤ m, then there exists a natural number k such that n + k = m.","distance":0.258529178116770730344597950534080155193805694580078125}],["This theorem states that for any two natural numbers `m` and `n`, if `m` is less than `n`, then there exists a natural number `k` such that `n` is equal to `m + k + 1`. In other words, if one natural number is smaller than another, you can find some natural number that when added to the smaller number and one, gives you the larger number.",{"type":"∀ {m n : ℕ}, m < n → ∃ k, n = m + k + 1","name":"Nat.exists_eq_add_of_lt","isProp":true,"docString":"This theorem states that for any two natural numbers `m` and `n`, if `m` is less than `n`, then there exists a natural number `k` such that `n` is equal to `m + k + 1`. In other words, if one natural number is smaller than another, you can find some natural number that when added to the smaller number and one, gives you the larger number.","distance":0.2406771554874245488964135120113496668636798858642578125}],["Count the number of naturals `k < n` satisfying `p k`. ",{"type":"(p : ℕ → Prop) → [inst : DecidablePred p] → ℕ → ℕ","name":"Nat.count","isProp":false,"docString":"Count the number of naturals `k < n` satisfying `p k`. ","distance":0.30172421993425946329381304167327471077442169189453125}],[" For all natural numbers `m` and `n`, if `m ≤ n`, then there exists a natural number `k` such that `n = m + k`.",{"type":"∀ {m n : ℕ}, m ≤ n → ∃ k, n = m + k","name":"Nat.exists_eq_add_of_le","isProp":true,"docString":" For all natural numbers `m` and `n`, if `m ≤ n`, then there exists a natural number `k` such that `n = m + k`.","distance":0.263070069354439717290716771458392031490802764892578125}],["This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.",{"type":"∀ {k n : ℕ}, 0 < k → n < n + k","name":"Nat.lt_add_of_pos_right","isProp":true,"docString":"This theorem states that for any two natural numbers `k` and `n`, if `k` is greater than zero then `n` is less than `n + k`. In other words, adding a positive natural number `k` to another natural number `n` always results in a number that is larger than `n`.","distance":0.250872395049370255915022198678343556821346282958984375}],["`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ",{"type":"{R : Type u_1} → [inst : CommMonoidWithZero R] → R → Prop","name":"IsPrimePow","isProp":false,"docString":"`n` is a prime power if there is a prime `p` and a positive natural `k` such that `n` can be\nwritten as `p^k`. ","distance":0.303796129677198878393795666852383874356746673583984375}],["Two natural numbers are equal if and only if they have the same multiples. ",{"type":"∀ {m n : ℕ}, (∀ (a : ℕ), m ∣ a ↔ n ∣ a) ↔ m = n","name":"Nat.dvd_right_iff_eq","isProp":true,"docString":"Two natural numbers are equal if and only if they have the same multiples. ","distance":0.313604908020508943433668491707067005336284637451171875}],["For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ",{"type":"∀ {R : Type u_4} [inst : NormedRing R] (k : ℕ) {r : ℝ}, 1 < r → (fun n => ↑n ^ k) =o[Filter.atTop] fun n => r ^ n","name":"isLittleO_pow_const_const_pow_of_one_lt","isProp":true,"docString":"For any natural `k` and a real `r > 1` we have `n ^ k = o(r ^ n)` as `n → ∞`. ","distance":0.315541312337385360109465182176791131496429443359375}],["If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\nthat are equal mod `k`. ",{"type":"∀ {s : Set ℕ}, Set.Infinite s → ∀ {k : ℕ}, 0 < k → ∃ m ∈ s, ∃ n ∈ s, m < n ∧ m ≡ n [MOD k]","name":"Nat.exists_lt_modEq_of_infinite","isProp":true,"docString":"If `s` is an infinite set of natural numbers and `k > 0`, then `s` contains two elements `m < n`\nthat are equal mod `k`. ","distance":0.315633278189878241359878074945299886167049407958984375}]]