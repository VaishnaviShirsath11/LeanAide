{
  "lean_trans_prompt": "You are a coding assistant who translates from natural language to Lean Theorem Prover code following examples. Follow EXACTLY the examples given.",
  "sys_prompt": "You are a Mathematics, Lean 4 and coding assistant who answers questions about Mathematics and Lean 4, gives hints while coding in Lean 4. You also translates from natural language to Lean Theorem Prover code and vice versa when asked.",
  "translate_sys_prompt": "Follow EXACTLY any examples given when generating Lean code.",
  "math_sys_prompt": "You are a mathematics assistant for research mathematicians and advanced students who also helps with computer-assisted mathematics. Answer mathematical questions with the level of precision and detail expected in graduate level mathematics courses and in mathematics research papers. Be concise and give only what is asked for, avoiding phrases like 'Here is the proof'. Some of your output is designed to be used as input to programs, so give answers to questions as best as you can in the form requested. In particular give valid JSON when this is asked for. Do not explain the process by which the answer can be obtained instead of giving the answer.",
  "theorem_proof": "##Theorem:\n${theorem}\n## Proof\n${proof}\n",
  "prove": "Prove the following theorem:\n## Theorem \n${theorem}\n\nGive ONLY the proof.",
  "solve": "Solve the following problem:\n## Problem \n${problem}\n\nGive only the solution.",
  "solution_to_theory" :"The following is a mathematical problem and its solution\n## Problem\n${problem}\n## Solution\n${solution}\n-----\n\nRewrite this as one or more theorems and their proofs.",
  "prove_or_disprove": "Prove or disprove the following theorem:\n## Theorem \n${theorem}\n",
  "make_structured": "Your goal is to write the following mathematics in a specific JSON format, `ProofJSON`, which is described as follows:\n\n${proof_json}\n\nTranslate the following proof into the `ProofJSON` format.\n${text}\n",
  "extend_structured": "Your goal is to write the following mathematics in a specific JSON format, `ProofJSON`, which is described as follows:\n\n${proof_json}\n\nThe following is a summary of the results of the earlier sections of the document in a simpler JSON format, with proofs omitted.\n\n${preceding}\n---------\n\nTranslate the following proof into the `ProofJSON` format.\n${text}\n",
  "add_statements": " The following is a body of mathematics in the `ProofJSON` format, a particular JSON schema.\n\n${json}\nFor each object of type `assertion`, add a field `statement` which is a self-contained statement of the assertion (including all the assumptions and relevant `let` statements) like the statement of a lemma: for example make the statement `if H is a subgroup of Z/10 then the order of Z divides 10` if the **claim** is `H is a subgroup of Z/10` and **deduced-from** includes `the order of Z divides 10`. Give the modified JSON only.",
  "prove_with_outline": "Prove the following theorem, using the outline provided.\n## Theorem\n${theorem}\n## Outline\n${outline}\n",
  "expand_deductions": "The following is a body of mathematics in the `ProofJSON` format, a particular JSON schema.\n\n${json}\nFor each object of type `assertion`, check whether the `claim` indeed follows from the results in `deduced_from`. If there is a mathematical error in the claim, add a field `error` with a description of the error. If the `claim` follows from the `deduced_from` results, expand each theorem in the `deduced_from` list to have fields `name`, `statement` (the general form of the statement applied), `applied-to` (the instantiantiations, i.e. values of the variables, for the specific application), `assumptions-satisfied` (the assumptions of the general statements that are satisfied here allowing the statement to be applied). For example, if the claim is `H is a subgroup of Z/10` and `deduced_from` includes `the order of Z divides 10` and `Lagrange's theorem, then replace `Lagrange's theorem` by the object `{\"name\": \"Lagrange's theorem\", \"statement\": \"If H is a subgroup of a group G then the order of H divides the order of G\", \"applied-to\": {\"H\": \"H\", \"G\": \"Z/10\"}, \"assumptions-satisfied\": [\"Z/10 is a group\", \"H is a subgroup of Z/10\"] }`. Carefully read the proof and give the modified JSON (with more details for the proof) only.",
  "expand_observations": "Your goal is to check and report errors or supply details as appropriate for a body of mathematics in the `ProofJSON` format, a particular JSON schema. For reference, the description of `ProofJson` is the following:\n${proof_json}\nThe following is the body of mathematics which you have to review and rewrite:\n${json}\nFor each object of type `observation`,\n* If the observation is mathematically incorrect, add a field `error` with the error.\n* If the observation is correct and simple enough that it will be given without proof in a graduate text, leave it unchanged.\n* If the observation is correct but not obvious, replace the corresponding object with one of type `assertion`, `lemma` or `theorem` with fields as in the ProofJSON format.\n\nCarefully read the proof and give the modified JSON (with more details for the proof) only.",
  "expand_justifications": "Your goal is to check and report errors or supply details as appropriate for a body of mathematics in the `ProofJSON` format, a particular JSON schema. For reference, the description of `ProofJson` is the following:\n${proof_json}\nThe following is the body of mathematics which you have to review and rewrite:\n${json}\nFor each object of type `assertion` which has a `justification` field,\n* If the `claim` is mathematically incorrect, add a field `error` with the error.\n* If the `claime` is correct and a simple enough consequence of the `deduced_from` that it will be stated as a consequence of these without further proof in a graduate text, remove the justification.\n* If the `claim` is correct but not an obvious consequence of the statements in `deduced_from`, replace the corresponding object with one of type `lemma` or `theorem` with fields as in the ProofJSON format.\n\nCarefully read the proof and give the modified JSON (with more details for the proof) only.",
  "add_names": "The following is a body of mathematics in the `ProofJSON` format, a particular JSON schema.\n\n${json}\nFor each of the objects of add a field `name` which is a unique name for the let statement following the conventions of the Lean Mathematics library.\n\n${json}\n--------\nThe following are some theorems and definitions as examples of the desired format.\n\n${examples}\n",
  "explicit_references": "The following is a body of mathematics in the `ProofJSON` format, a particular JSON schema.\n\n${json}\nFor each object of type `assertion`, modify `deduced_from` if necessary so that each entry is either the name of some object mentioned earlier or that of a standard theorem, or an object with fields `result` and `applied_to` both of which are names of objects mentioned earlier. If needed introduce objects of type `theorem`, `let` or `definition` to make this possible.",
  "summarize": "The following is a body of mathematics in the `ProofJSON` format, a particular JSON schema.\n\n${json}\nSummarize the contents for use in subsequent sections of the document by omitting all proofs and using a similar JSON format with only `definition` and `theorem` types. For objects with type `theorem` include a `status` field.\n",
  "doc_string": "Describe the following ${kind} briefly in natural language, similar to a documentation string. The description should be either a single sentence or a paragraph with 2-3 sentences, and may contain LaTeX mathematics.\n```lean\n${head} ${theorem} := by sorry\n```.",
  "informalize": "Translate the following Lean 4 code briefly into natural language. The translation can contain LaTeX mathematics. Note that a variable in Lean that has type a proposition can be interpreted as an assumption. Proofs of theorems have been omitted for brevity but all theorems have been proved.\n```lean\n${code}\n```\n",
  "describe_theorem": "Describe the following theorem (whose proof is suppressed for brevity) in natural language, similar to a documentation string. The description should be either a single sentence or a paragraph with 2-3 sentences, and may contain LaTeX mathematics.\n```lean\n${theorem}\n```\n",
  "describe_theorem_with_defs": "The following are some definitions in Lean 4 that are involved in the statement of a theorem which you have to describe in natural language.\n```lean\n${definitions}\n```\n\nDescribe the following theorem (whose proof is suppressed for brevity) in natural language, similar to a documentation string. The description should be either a single sentence or a paragraph with 2-3 sentences, and may contain LaTeX mathematics.\n```lean\n${theorem}\n```\n",
  "state_theorem": "State the following theorem (whose proof is suppressed for brevity) in natural language concisely in a single sentence, which may contain LaTeX mathematics (enclosed in `$` signs).\n```lean\n${theorem}\n```\n",
  "state_theorem_with_defs": "The following are some definitions in Lean 4 that are involved in the statement of a theorem which you have to state in natural language.\n```lean\n${definitions}\n```\n\nState the following theorem (whose proof is suppressed for brevity) in natural language concisely in a single sentence, which may contain LaTeX mathematics (enclosed in `$` signs).\n```lean\n${theorem}\n```\n",
  "state_def": "State the following theorem Lean 4 definition in natural language concisely in a single sentence, which may contain LaTeX mathematics (enclosed in `$` signs).\n```lean\n${defn}\n```\n",
  "state_def_with_defs": "The following are some definitions in Lean 4 that are involved in the statement of a theorem which you have to state in natural language.\n```lean\n${definitions}\n```\n\nState the following Lean 4 definition in natural language concisely in a single sentence, which may contain LaTeX mathematics (enclosed in `$` signs).\n```lean\n${defn}\n```\n",
  "prove_theorem": "State and prove the following theorem (whose Lean proof is suppressed for brevity) in natural language using markdown, which may contain LaTeX mathematics (enclosed in `$` signs).\n```lean\n${theorem}\n```\n",
  "prove_theorem_with_defs": "The following are some definitions in Lean 4 that are involved in the statement of a theorem which you have to state and prove in natural language.\n```lean\n${definitions}\n```\n\nState and prove the following theorem (whose Lean proof is suppressed for brevity) in natural language using markdown, which may contain LaTeX mathematics (enclosed in `$` signs).\n```lean\n${theorem}\n```\n",
  "math_terms": "In the following statement, give a list of mathematical terms whose definition may not be familiar to typical advanced mathematics students. This could be an empty list or a singleton:\n\n${statement}\nGive ONLY a JSON list of objects, each with two fields: `term` and `definition`",
  "math_terms_excluding": "In the following statement, give a list of mathematical terms whose definition may not be familiar to typical advanced mathematics students. The list of terms co could be an empty list or a singleton:\n\n${statement}\n---\nExclude the following definitions which are assumed to be known\n\n${exclusions}\n---\n\nGive ONLY a JSON list of objects, each with two fields: `term` and `definition`",
  "math_synonyms": "For each of the mathematical terms in the following JSON list, give synonyms in JSON format as list of objects with two fields: \"term\" and \"synonyms\". If there are no synonyms, return an empty list.\n\n{terms}\n",
  "summarise": "Summarise the following mathematical text briefly. The summary should include the main definitions, the statements of the main theorems and the main ideas in the proofs of the theorems. Definitions and theorems should be precisely stated. Include precise statements of the theorems used.\n\n---\n${text}\n",
  "suggest_lemma": "The following is a mathematical statement in Lean (with proof omitted) preceded by a decription as a documentation string (enclosed between `/--` and `-/`).\n```lean\n/-- ${description} -/\ntheorem ${name} : ${theorem} := by sorry\n```\n Suggest a lemma that could be used to prove the theorem. The lemma should be a mathematical statement in Lean that is simpler than the theorem and is used in the proof of the theorem. Give ONLY the Lean code for the statement of the lemma.\n",
  "known_results": "The following are known results that can be used without proof, even implicitly. DO NOT report the use of these results as errors or missing steps.",
  "check_equivalence" : "The following are two statements which are supposed to state the same theorem.\n\n## Theorem 1\n\n${theorem1}\n\n---\n\n## Theorem 2\n\n${theorem2}\n\n---\n\nDo these statements state the same theorem? Identical statements are fine. It is fine if one version omits assumptions that are generally implicit. \nAnswer ONLY `true` if the statements are the same; if they are different output `false` as the first line and then a brief explanation in a single short sentence why the statements do not state the same result.",
  "check_equivalence_with_defs" : "The following are some definitions in Lean 4 that are involved in the statements of theorems which you have to compare.\n```lean\n${definitions}\n```\n\nThe following are two statements which are supposed to state the same theorem.\n\n## Theorem 1\n\n${theorem1}\n\n---\n\n## Theorem 2\n\n${theorem2}\n\n---\n\nDo these statements state the same theorem? Identical statements are fine. It is fine if one version omits assumptions that are generally implicit. \nAnswer ONLY `true` if the statements are the same; if they are different output `false` as the first line and then a brief explanation in a single short sentence why the statements do not state the same result."
}
